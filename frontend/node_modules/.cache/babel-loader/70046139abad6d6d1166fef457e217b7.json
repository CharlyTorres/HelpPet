{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useRef, useEffect, createContext, useContext, forwardRef, useCallback } from \"react\";\nimport { disableBodyScroll, enableBodyScroll } from \"body-scroll-lock\";\nimport FocusLock from \"react-focus-lock/dist/cjs\";\nimport { wrapEvent, useForkRef, getFocusables } from \"../utils\";\nimport Box from \"../Box\";\nimport Portal from \"../Portal\";\nimport CloseButton from \"../CloseButton\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useId } from \"@reach/auto-id\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport { canUseDOM } from \"exenv\"; ////////////////////////////////////////////////////////////////////////\n\nvar ModalContext = createContext({});\n\nvar useModalContext = function useModalContext() {\n  return useContext(ModalContext);\n}; ////////////////////////////////////////////////////////////////////////\n\n\nfunction useAriaHider(_ref) {\n  var isOpen = _ref.isOpen,\n      id = _ref.id,\n      enableInert = _ref.enableInert,\n      _ref$container = _ref.container,\n      container = _ref$container === void 0 ? canUseDOM ? document.body : null : _ref$container;\n  var mountRef = useRef(canUseDOM ? document.getElementById(id) || document.createElement(\"div\") : null);\n  useEffect(function () {\n    var undoAriaHidden = null;\n    var mountNode = mountRef.current;\n\n    if (isOpen && canUseDOM) {\n      mountRef.current.id = id;\n      container.appendChild(mountRef.current);\n\n      if (enableInert) {\n        undoAriaHidden = hideOthers(mountNode);\n      }\n    }\n\n    return function () {\n      if (enableInert && undoAriaHidden != null) {\n        undoAriaHidden();\n      }\n\n      if (mountNode.parentElement) {\n        mountNode.parentElement.removeChild(mountNode);\n      }\n    };\n  }, [isOpen, id, enableInert, container]);\n  return mountRef;\n} ////////////////////////////////////////////////////////////////////////\n\n\nvar Modal = function Modal(_ref2) {\n  var isOpen = _ref2.isOpen,\n      initialFocusRef = _ref2.initialFocusRef,\n      finalFocusRef = _ref2.finalFocusRef,\n      onClose = _ref2.onClose,\n      _ref2$blockScrollOnMo = _ref2.blockScrollOnMount,\n      blockScrollOnMount = _ref2$blockScrollOnMo === void 0 ? true : _ref2$blockScrollOnMo,\n      _ref2$closeOnEsc = _ref2.closeOnEsc,\n      closeOnEsc = _ref2$closeOnEsc === void 0 ? true : _ref2$closeOnEsc,\n      _ref2$closeOnOverlayC = _ref2.closeOnOverlayClick,\n      closeOnOverlayClick = _ref2$closeOnOverlayC === void 0 ? true : _ref2$closeOnOverlayC,\n      _ref2$useInert = _ref2.useInert,\n      useInert = _ref2$useInert === void 0 ? true : _ref2$useInert,\n      _ref2$scrollBehavior = _ref2.scrollBehavior,\n      scrollBehavior = _ref2$scrollBehavior === void 0 ? \"outside\" : _ref2$scrollBehavior,\n      isCentered = _ref2.isCentered,\n      _ref2$addAriaLabels = _ref2.addAriaLabels,\n      addAriaLabels = _ref2$addAriaLabels === void 0 ? true : _ref2$addAriaLabels,\n      preserveScrollBarGap = _ref2.preserveScrollBarGap,\n      _ref2$formatIds = _ref2.formatIds,\n      formatIds = _ref2$formatIds === void 0 ? function (id) {\n    return {\n      content: \"modal-\" + id,\n      header: \"modal-\" + id + \"-header\",\n      body: \"modal-\" + id + \"-body\"\n    };\n  } : _ref2$formatIds,\n      container = _ref2.container,\n      _ref2$returnFocusOnCl = _ref2.returnFocusOnClose,\n      returnFocusOnClose = _ref2$returnFocusOnCl === void 0 ? true : _ref2$returnFocusOnCl,\n      children = _ref2.children,\n      id = _ref2.id,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? \"md\" : _ref2$size;\n  var contentRef = useRef(null);\n  var uuid = useId();\n\n  var _id = id || uuid;\n\n  var contentId = formatIds(_id)[\"content\"];\n  var headerId = formatIds(_id)[\"header\"];\n  var bodyId = formatIds(_id)[\"body\"];\n  var portalId = \"chakra-portal-\" + _id;\n  var addAriaLabelledby = false;\n  var addAriaDescribedby = false;\n\n  if (typeof addAriaLabels === \"object\") {\n    addAriaLabelledby = addAriaLabels[\"header\"];\n    addAriaDescribedby = addAriaLabels[\"body\"];\n  }\n\n  if (typeof addAriaLabels === \"boolean\") {\n    addAriaLabelledby = addAriaLabels;\n    addAriaDescribedby = addAriaLabels;\n  }\n\n  useEffect(function () {\n    var dialogNode = contentRef.current;\n\n    if (isOpen && blockScrollOnMount) {\n      disableBodyScroll(dialogNode, {\n        reserveScrollBarGap: preserveScrollBarGap\n      });\n    }\n\n    return function () {\n      return enableBodyScroll(dialogNode);\n    };\n  }, [isOpen, blockScrollOnMount, preserveScrollBarGap]);\n  useEffect(function () {\n    var func = function func(event) {\n      if (event.key === \"Escape\" && closeOnEsc) {\n        onClose(event, \"pressedEscape\");\n      }\n    };\n\n    if (isOpen && !closeOnOverlayClick) {\n      canUseDOM && document.addEventListener(\"keydown\", func);\n    }\n\n    return function () {\n      canUseDOM && document.removeEventListener(\"keydown\", func);\n    };\n  }, [isOpen, onClose, closeOnOverlayClick, closeOnEsc]);\n  var mountRef = useAriaHider({\n    isOpen: isOpen,\n    id: portalId,\n    enableInert: useInert,\n    container: container\n  });\n  var context = {\n    isOpen: isOpen,\n    initialFocusRef: initialFocusRef,\n    onClose: onClose,\n    blockScrollOnMount: blockScrollOnMount,\n    closeOnEsc: closeOnEsc,\n    closeOnOverlayClick: closeOnOverlayClick,\n    returnFocusOnClose: returnFocusOnClose,\n    contentRef: contentRef,\n    scrollBehavior: scrollBehavior,\n    isCentered: isCentered,\n    headerId: headerId,\n    bodyId: bodyId,\n    contentId: contentId,\n    size: size,\n    addAriaLabelledby: addAriaLabelledby,\n    addAriaDescribedby: addAriaDescribedby\n  };\n  var activateFocusLock = useCallback(function () {\n    if (initialFocusRef && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else {\n      if (contentRef.current) {\n        var focusables = getFocusables(contentRef.current);\n\n        if (focusables.length === 0) {\n          contentRef.current.focus();\n        }\n      }\n    }\n  }, [initialFocusRef]);\n  var deactivateFocusLock = useCallback(function () {\n    if (finalFocusRef && finalFocusRef.current) {\n      finalFocusRef.current.focus();\n    }\n  }, [finalFocusRef]);\n  if (!isOpen) return null;\n  return React.createElement(ModalContext.Provider, {\n    value: context\n  }, React.createElement(Portal, {\n    container: mountRef.current\n  }, React.createElement(FocusLock, {\n    returnFocus: returnFocusOnClose && !finalFocusRef,\n    onActivation: activateFocusLock,\n    onDeactivation: deactivateFocusLock\n  }, children)));\n}; ////////////////////////////////////////////////////////////////////////\n\n\nvar ModalOverlay = React.forwardRef(function (props, ref) {\n  return React.createElement(Box, _extends({\n    pos: \"fixed\",\n    bg: \"rgba(0,0,0,0.4)\",\n    left: \"0\",\n    top: \"0\",\n    w: \"100vw\",\n    h: \"100vh\",\n    ref: ref,\n    zIndex: \"overlay\",\n    onClick: wrapEvent(props.onClick, function (event) {\n      event.stopPropagation();\n    })\n  }, props));\n});\nModalOverlay.displayName = \"ModalOverlay\"; ////////////////////////////////////////////////////////////////////////\n\nvar ModalContent = React.forwardRef(function (_ref3, ref) {\n  var onClick = _ref3.onClick,\n      children = _ref3.children,\n      _ref3$zIndex = _ref3.zIndex,\n      zIndex = _ref3$zIndex === void 0 ? \"modal\" : _ref3$zIndex,\n      noStyles = _ref3.noStyles,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"onClick\", \"children\", \"zIndex\", \"noStyles\"]);\n\n  var _useModalContext = useModalContext(),\n      contentRef = _useModalContext.contentRef,\n      onClose = _useModalContext.onClose,\n      isCentered = _useModalContext.isCentered,\n      bodyId = _useModalContext.bodyId,\n      headerId = _useModalContext.headerId,\n      contentId = _useModalContext.contentId,\n      size = _useModalContext.size,\n      closeOnEsc = _useModalContext.closeOnEsc,\n      addAriaLabelledby = _useModalContext.addAriaLabelledby,\n      addAriaDescribedby = _useModalContext.addAriaDescribedby,\n      scrollBehavior = _useModalContext.scrollBehavior,\n      closeOnOverlayClick = _useModalContext.closeOnOverlayClick;\n\n  var _contentRef = useForkRef(ref, contentRef);\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var colorModeStyles = {\n    light: {\n      bg: \"white\",\n      shadow: \"0 7px 14px 0 rgba(0,0,0, 0.1), 0 3px 6px 0 rgba(0, 0, 0, .07)\"\n    },\n    dark: {\n      bg: \"gray.700\",\n      shadow: \"rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px\"\n    }\n  };\n  var boxStyleProps = colorModeStyles[colorMode];\n  var wrapperStyle = {};\n  var contentStyle = {};\n\n  if (isCentered) {\n    wrapperStyle = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    };\n  } else {\n    contentStyle = {\n      top: \"3.75rem\",\n      mx: \"auto\"\n    };\n  }\n\n  if (scrollBehavior === \"inside\") {\n    wrapperStyle = _objectSpread({}, wrapperStyle, {\n      maxHeight: \"calc(100vh - 7.5rem)\",\n      overflow: \"hidden\",\n      top: \"3.75rem\"\n    });\n    contentStyle = _objectSpread({}, contentStyle, {\n      height: \"100%\",\n      top: 0\n    });\n  }\n\n  if (scrollBehavior === \"outside\") {\n    wrapperStyle = _objectSpread({}, wrapperStyle, {\n      overflowY: \"auto\",\n      overflowX: \"hidden\"\n    });\n    contentStyle = _objectSpread({}, contentStyle, {\n      my: \"3.75rem\",\n      top: 0\n    });\n  }\n\n  if (noStyles) {\n    wrapperStyle = {};\n    contentStyle = {};\n  }\n\n  return React.createElement(Box, _extends({\n    pos: \"fixed\",\n    left: \"0\",\n    top: \"0\",\n    w: \"100%\",\n    h: \"100%\",\n    zIndex: zIndex,\n    onClick: function onClick(event) {\n      event.stopPropagation();\n\n      if (closeOnOverlayClick) {\n        onClose(event, \"clickedOverlay\");\n      }\n    },\n    onKeyDown: function onKeyDown(event) {\n      if (event.key === \"Escape\") {\n        event.stopPropagation();\n\n        if (closeOnEsc) {\n          onClose(event, \"pressedEscape\");\n        }\n      }\n    }\n  }, wrapperStyle), React.createElement(Box, _extends({\n    ref: _contentRef,\n    as: \"section\",\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    tabIndex: -1,\n    outline: 0,\n    maxWidth: size,\n    w: \"100%\",\n    id: contentId\n  }, addAriaDescribedby && {\n    \"aria-describedby\": bodyId\n  }, addAriaLabelledby && {\n    \"aria-labelledby\": headerId\n  }, {\n    pos: \"relative\",\n    d: \"flex\",\n    flexDir: \"column\",\n    zIndex: zIndex,\n    onClick: wrapEvent(onClick, function (event) {\n      return event.stopPropagation();\n    })\n  }, boxStyleProps, contentStyle, props), children));\n});\nModalContent.displayName = \"ModalContent\"; ////////////////////////////////////////////////////////////////////////\n\nvar ModalHeader = forwardRef(function (props, ref) {\n  var _useModalContext2 = useModalContext(),\n      headerId = _useModalContext2.headerId;\n\n  return React.createElement(Box, _extends({\n    ref: ref,\n    px: 6,\n    py: 4,\n    id: headerId,\n    as: \"header\",\n    position: \"relative\",\n    fontSize: \"xl\",\n    fontWeight: \"semibold\"\n  }, props));\n});\nModalHeader.displayName = \"ModalHeader\"; ////////////////////////////////////////////////////////////////////////\n\nvar ModalFooter = forwardRef(function (props, ref) {\n  return React.createElement(Box, _extends({\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    ref: ref,\n    px: 6,\n    py: 4,\n    as: \"footer\"\n  }, props));\n});\nModalFooter.displayName = \"ModalFooter\"; ////////////////////////////////////////////////////////////////////////\n\nvar ModalBody = forwardRef(function (props, ref) {\n  var _useModalContext3 = useModalContext(),\n      bodyId = _useModalContext3.bodyId,\n      scrollBehavior = _useModalContext3.scrollBehavior;\n\n  var style = {};\n\n  if (scrollBehavior === \"inside\") {\n    style = {\n      overflowY: \"auto\"\n    };\n  }\n\n  return React.createElement(Box, _extends({\n    ref: ref,\n    id: bodyId,\n    px: 6,\n    py: 2,\n    flex: \"1\"\n  }, style, props));\n});\nModalBody.displayName = \"ModalBody\"; ////////////////////////////////////////////////////////////////////////\n\nvar ModalCloseButton = forwardRef(function (props, ref) {\n  var _useModalContext4 = useModalContext(),\n      onClose = _useModalContext4.onClose;\n\n  return React.createElement(CloseButton, _extends({\n    ref: ref,\n    onClick: onClose,\n    position: \"absolute\",\n    top: \"8px\",\n    right: \"12px\"\n  }, props));\n});\nModalCloseButton.displayName = \"ModalCloseButton\"; ////////////////////////////////////////////////////////////////////////\n\nexport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton };","map":null,"metadata":{},"sourceType":"module"}