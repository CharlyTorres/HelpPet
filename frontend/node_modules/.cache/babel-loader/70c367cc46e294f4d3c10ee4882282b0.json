{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { createContext, useContext, useState } from \"react\";\nimport useDarkMode from \"use-dark-mode\"; // This context handles the color mode (light or dark) of the UI\n\nexport var ColorModeContext = createContext({\n  colorMode: \"light\",\n  toggleColorMode: function toggleColorMode() {}\n});\n\nvar ColorModeProvider = function ColorModeProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n\n  var _useState = useState(value),\n      manualMode = _useState[0],\n      setManualMode = _useState[1];\n\n  var manualToggle = function manualToggle() {\n    if (manualMode === \"light\") {\n      setManualMode(\"dark\");\n    }\n\n    if (manualMode === \"dark\") {\n      setManualMode(\"light\");\n    }\n  };\n\n  var _useDarkMode = useDarkMode(false),\n      isDarkMode = _useDarkMode.value,\n      toggle = _useDarkMode.toggle;\n\n  var colorMode = isDarkMode ? \"dark\" : \"light\";\n  var childContext = value != null ? {\n    colorMode: manualMode,\n    toggleColorMode: manualToggle\n  } : {\n    colorMode: colorMode,\n    toggleColorMode: toggle\n  };\n  return jsx(ColorModeContext.Provider, {\n    value: childContext\n  }, children);\n};\n\nvar DarkMode = function DarkMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"dark\"\n  }, props));\n};\n\nvar LightMode = function LightMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"light\"\n  }, props));\n};\n\nvar useColorMode = function useColorMode() {\n  var context = useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n\nexport default ColorModeProvider;\nexport { useColorMode, DarkMode, LightMode };","map":null,"metadata":{},"sourceType":"module"}