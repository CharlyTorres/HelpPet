{"ast":null,"code":"import * as React from \"react\";\nimport { useTransition, animated } from \"react-spring\";\nimport ReachAlert from \"@reach/alert\";\nimport Alert from \"./Alert\";\nimport { useTimeout } from \"./useTimeout\";\n\nconst getStyle = position => {\n  let style = {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  };\n\n  if (position.includes(\"right\")) {\n    style.alignItems = \"flex-end\";\n  } else if (position.includes(\"left\")) {\n    style.alignItems = \"flex-start\";\n  }\n\n  return style;\n};\n\nexport const Message = ({\n  id,\n  message,\n  position,\n  onRequestRemove,\n  duration = 30000\n}) => {\n  const container = React.useRef(null);\n  const [timeout, setTimeout] = React.useState(duration);\n  const [localShow, setLocalShow] = React.useState(true);\n  const isFromTop = position === \"top-left\" || position === \"top-right\" || position === \"top\";\n  useTimeout(close, timeout);\n  const animation = {\n    config: {\n      mass: 1,\n      tension: 185,\n      friction: 26\n    },\n    from: {\n      opacity: 1,\n      height: 0,\n      transform: `translateY(${isFromTop ? \"-100%\" : 0}) scale(1)`\n    },\n    enter: () => next => next({\n      opacity: 1,\n      height: container.current.getBoundingClientRect().height,\n      transform: `translateY(0) scale(1)`\n    }),\n    leave: {\n      opacity: 0,\n      height: 0,\n      transform: `translateY(0 scale(0.9)`\n    },\n    onRest\n  };\n  const transition = useTransition(localShow, null, animation);\n  const style = React.useMemo(() => getStyle(position), [position]);\n\n  function onMouseEnter() {\n    setTimeout(null);\n  }\n\n  function onMouseLeave() {\n    setTimeout(duration);\n  }\n\n  function onRest() {\n    if (!localShow) {\n      onRequestRemove();\n    }\n  }\n\n  function close() {\n    setLocalShow(false);\n  }\n\n  function renderMessage() {\n    if (typeof message === \"string\" || React.isValidElement(message)) {\n      return React.createElement(Alert, {\n        id: id,\n        title: message,\n        onClose: close\n      });\n    }\n\n    if (typeof message === \"function\") {\n      return message({\n        id,\n        onClose: close\n      });\n    }\n\n    return null;\n  }\n\n  return React.createElement(React.Fragment, null, transition.map(({\n    key,\n    item,\n    props\n  }) => item && React.createElement(animated.div, {\n    key: key,\n    className: \"Toaster__message\",\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    style: Object.assign({\n      opacity: props.opacity,\n      height: props.height\n    }, style)\n  }, React.createElement(animated.div, {\n    style: {\n      transform: props.transform,\n      pointerEvents: \"auto\"\n    },\n    ref: container,\n    className: \"Toaster__message-wrapper\"\n  }, React.createElement(ReachAlert, null, renderMessage())))));\n};","map":null,"metadata":{},"sourceType":"module"}