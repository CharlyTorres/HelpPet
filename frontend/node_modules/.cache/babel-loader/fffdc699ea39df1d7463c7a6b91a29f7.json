{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  animation: \", \" 1s linear infinite;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  from { background-position: 1rem 0}\\n  to { background-position: 0 0 }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/** @jsx jsx */\n\n\nimport { jsx, keyframes, css } from \"@emotion/core\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport Box from \"../Box\";\nimport { generateStripe } from \"../theme/colors-utils\";\nimport { valueToPercent } from \"../Slider\";\nvar stripe = keyframes(_templateObject());\nvar stripeAnimation = css(_templateObject2(), stripe);\nexport var ProgressLabel = function ProgressLabel(props) {\n  return jsx(Box, _extends({\n    textAlign: \"center\",\n    width: \"100%\"\n  }, props));\n};\n\nvar ProgressIndicator = function ProgressIndicator(_ref) {\n  var isIndeterminate = _ref.isIndeterminate,\n      min = _ref.min,\n      max = _ref.max,\n      value = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"isIndeterminate\", \"min\", \"max\", \"value\"]);\n\n  var percent = valueToPercent(value, min, max);\n  return jsx(Box, _extends({\n    height: \"100%\",\n    \"aria-valuemax\": max,\n    \"aria-valuemin\": min,\n    \"aria-valuenow\": isIndeterminate ? null : value,\n    role: \"progressbar\",\n    transition: \"all 0.3s\",\n    width: percent + \"%\"\n  }, rest));\n};\n\nvar progressbarSizes = {\n  lg: \"1rem\",\n  md: \"0.75rem\",\n  sm: \"0.5rem\"\n};\n\nvar ProgressTrack = function ProgressTrack(_ref2) {\n  var size = _ref2.size,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"size\"]);\n\n  return jsx(Box, _extends({\n    pos: \"relative\",\n    height: progressbarSizes[size],\n    overflow: \"hidden\"\n  }, rest));\n};\n\nvar Progress = function Progress(_ref3) {\n  var _ref3$color = _ref3.color,\n      color = _ref3$color === void 0 ? \"blue\" : _ref3$color,\n      _ref3$value = _ref3.value,\n      value = _ref3$value === void 0 ? 63 : _ref3$value,\n      _ref3$min = _ref3.min,\n      min = _ref3$min === void 0 ? 0 : _ref3$min,\n      _ref3$max = _ref3.max,\n      max = _ref3$max === void 0 ? 100 : _ref3$max,\n      _ref3$size = _ref3.size,\n      size = _ref3$size === void 0 ? \"md\" : _ref3$size,\n      hasStripe = _ref3.hasStripe,\n      isAnimated = _ref3.isAnimated,\n      borderRadius = _ref3.borderRadius,\n      rounded = _ref3.rounded,\n      children = _ref3.children,\n      isIndeterminate = _ref3.isIndeterminate,\n      rest = _objectWithoutPropertiesLoose(_ref3, [\"color\", \"value\", \"min\", \"max\", \"size\", \"hasStripe\", \"isAnimated\", \"borderRadius\", \"rounded\", \"children\", \"isIndeterminate\"]);\n\n  var _borderRadius = rounded || borderRadius;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var trackColor = {\n    light: \"gray.100\",\n    dark: \"whiteAlpha.300\"\n  };\n  var indicatorColor = {\n    light: color + \".500\",\n    dark: color + \".200\"\n  };\n  var stripeStyle = {\n    light: generateStripe({}),\n    dark: generateStripe({\n      color: \"rgba(0,0,0,0.1)\"\n    })\n  };\n  return jsx(ProgressTrack, _extends({\n    size: size,\n    bg: trackColor[colorMode],\n    borderRadius: _borderRadius\n  }, rest), jsx(ProgressIndicator, _extends({\n    min: min,\n    max: max,\n    value: value,\n    bg: indicatorColor[colorMode],\n    borderRadius: _borderRadius\n  }, isIndeterminate && {\n    width: \"100%\",\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    bottom: 0,\n    willChange: \"left, right\"\n  }, {\n    css: [hasStripe && stripeStyle[colorMode], hasStripe && isAnimated && stripeAnimation]\n  })));\n};\n\nexport default Progress;","map":null,"metadata":{},"sourceType":"module"}