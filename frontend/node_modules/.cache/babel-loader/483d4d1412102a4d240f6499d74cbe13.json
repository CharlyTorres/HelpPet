{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { forwardRef, useEffect, useRef } from \"react\";\nimport Box from \"../Box\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport ControlBox from \"../ControlBox\";\nimport Icon from \"../Icon\";\nimport VisuallyHidden from \"../VisuallyHidden\";\nimport useCheckboxStyle from \"./styles\";\nimport { useForkRef, useVariantColorWarning } from \"../utils\";\nvar Checkbox = forwardRef(function (_ref2, ref) {\n  var id = _ref2.id,\n      name = _ref2.name,\n      value = _ref2.value,\n      ariaLabel = _ref2[\"aria-label\"],\n      ariaLabelledBy = _ref2[\"aria-labelledby\"],\n      _ref2$variantColor = _ref2.variantColor,\n      variantColor = _ref2$variantColor === void 0 ? \"blue\" : _ref2$variantColor,\n      defaultIsChecked = _ref2.defaultIsChecked,\n      isChecked = _ref2.isChecked,\n      isFullWidth = _ref2.isFullWidth,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? \"md\" : _ref2$size,\n      isDisabled = _ref2.isDisabled,\n      isInvalid = _ref2.isInvalid,\n      isReadOnly = _ref2.isReadOnly,\n      onChange = _ref2.onChange,\n      onBlur = _ref2.onBlur,\n      onFocus = _ref2.onFocus,\n      isIndeterminate = _ref2.isIndeterminate,\n      children = _ref2.children,\n      iconColor = _ref2.iconColor,\n      _ref2$iconSize = _ref2.iconSize,\n      iconSize = _ref2$iconSize === void 0 ? \"10px\" : _ref2$iconSize,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"id\", \"name\", \"value\", \"aria-label\", \"aria-labelledby\", \"variantColor\", \"defaultIsChecked\", \"isChecked\", \"isFullWidth\", \"size\", \"isDisabled\", \"isInvalid\", \"isReadOnly\", \"onChange\", \"onBlur\", \"onFocus\", \"isIndeterminate\", \"children\", \"iconColor\", \"iconSize\"]); // Wrong usage of `variantColor` prop is quite common\n  // Let's add a warning hook that validates the passed variantColor\n\n\n  useVariantColorWarning(\"Checkbox\", variantColor);\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var styleProps = useCheckboxStyle({\n    color: variantColor,\n    size: size,\n    colorMode: colorMode\n  });\n  var ownRef = useRef();\n\n  var _ref = useForkRef(ownRef, ref);\n\n  useEffect(function () {\n    if (_ref.current) {\n      _ref.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate, _ref]);\n  return jsx(Box, _extends({\n    as: \"label\",\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    alignItems: \"center\",\n    width: isFullWidth ? \"full\" : undefined,\n    cursor: isDisabled ? \"not-allowed\" : \"pointer\"\n  }, rest), jsx(VisuallyHidden, {\n    as: \"input\",\n    type: \"checkbox\",\n    \"aria-label\": ariaLabel,\n    id: id,\n    ref: _ref,\n    name: name,\n    value: value,\n    onChange: isReadOnly ? undefined : onChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    defaultChecked: isReadOnly ? undefined : defaultIsChecked,\n    checked: isReadOnly ? Boolean(isChecked) : defaultIsChecked ? undefined : isChecked,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    \"aria-readonly\": isReadOnly,\n    \"aria-invalid\": isInvalid,\n    \"aria-checked\": isIndeterminate ? \"mixed\" : isChecked\n  }), jsx(ControlBox, _extends({\n    opacity: isReadOnly ? 0.8 : 1\n  }, styleProps), jsx(Icon, {\n    name: isIndeterminate ? \"minus\" : \"check\",\n    size: iconSize,\n    color: iconColor,\n    transition: \"transform 240ms, opacity 240ms\"\n  })), children && jsx(Box, {\n    ml: 2,\n    fontSize: size,\n    userSelect: \"none\",\n    opacity: isDisabled ? 0.4 : 1\n  }, children));\n});\nCheckbox.displayName = \"Checkbox\";\nexport default Checkbox;","map":null,"metadata":{},"sourceType":"module"}