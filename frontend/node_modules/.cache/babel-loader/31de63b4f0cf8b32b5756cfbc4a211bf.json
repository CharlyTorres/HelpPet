{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport { jsx } from \"@emotion/core\";\nimport { createContext, useContext, useEffect, useRef, useState, forwardRef } from \"react\";\nimport PseudoBox from \"../PseudoBox\";\nimport Box from \"../Box\";\nvar EditableContext = createContext();\nvar Editable = forwardRef(function (_ref, ref) {\n  var valueProp = _ref.value,\n      defaultValue = _ref.defaultValue,\n      isDisabled = _ref.isDisabled,\n      onChange = _ref.onChange,\n      startWithEditView = _ref.startWithEditView,\n      onCancel = _ref.onCancel,\n      onSubmit = _ref.onSubmit,\n      _ref$selectAllOnFocus = _ref.selectAllOnFocus,\n      selectAllOnFocus = _ref$selectAllOnFocus === void 0 ? true : _ref$selectAllOnFocus,\n      _ref$submitOnBlur = _ref.submitOnBlur,\n      submitOnBlur = _ref$submitOnBlur === void 0 ? true : _ref$submitOnBlur,\n      _ref$isPreviewFocusab = _ref.isPreviewFocusable,\n      isPreviewFocusable = _ref$isPreviewFocusab === void 0 ? true : _ref$isPreviewFocusab,\n      _ref$placeholder = _ref.placeholder,\n      placeholder = _ref$placeholder === void 0 ? \"Click to edit...\" : _ref$placeholder,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"value\", \"defaultValue\", \"isDisabled\", \"onChange\", \"startWithEditView\", \"onCancel\", \"onSubmit\", \"selectAllOnFocus\", \"submitOnBlur\", \"isPreviewFocusable\", \"placeholder\", \"children\"]);\n\n  var _useState = useState(startWithEditView && !isDisabled),\n      isEditing = _useState[0],\n      setIsEditing = _useState[1];\n\n  var _useRef = useRef(valueProp != null),\n      isControlled = _useRef.current;\n\n  var _useState2 = useState(defaultValue || \"\"),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _value = isControlled ? valueProp : value;\n\n  var _useState3 = useState(_value),\n      previousValue = _useState3[0],\n      setPreviousValue = _useState3[1];\n\n  var inputRef = useRef(null);\n\n  var onRequestEdit = function onRequestEdit(event) {\n    if (!isDisabled) {\n      setIsEditing(true);\n    }\n  };\n\n  useEffect(function () {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      selectAllOnFocus && inputRef.current.select();\n    }\n  }, [isEditing, selectAllOnFocus]);\n\n  var handleCancel = function handleCancel() {\n    setIsEditing(false);\n    setValue(previousValue);\n\n    if (value !== previousValue) {\n      onChange && onChange(previousValue);\n    }\n\n    onCancel && onCancel(previousValue);\n  };\n\n  var handleSubmit = function handleSubmit() {\n    setIsEditing(false);\n    setPreviousValue(value);\n    onSubmit && onSubmit(value);\n  };\n\n  var handleChange = function handleChange(event) {\n    var value = event.target.value;\n\n    if (!isControlled) {\n      setValue(value);\n    }\n\n    onChange && onChange(value);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var key = event.key;\n\n    if (key === \"Escape\") {\n      handleCancel();\n      return;\n    }\n\n    if (key === \"Enter\") {\n      handleSubmit();\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (selectAllOnFocus) {\n      inputRef.current.select();\n    }\n  };\n\n  var childContext = {\n    inputRef: inputRef,\n    isEditing: isEditing,\n    isDisabled: isDisabled,\n    placeholder: placeholder,\n    onRequestEdit: onRequestEdit,\n    submitOnBlur: submitOnBlur,\n    isPreviewFocusable: isPreviewFocusable,\n    value: _value,\n    onKeyDown: handleKeyDown,\n    onChange: handleChange,\n    onSubmit: handleSubmit,\n    onCancel: handleCancel,\n    onFocus: handleFocus\n  };\n  return jsx(EditableContext.Provider, {\n    value: childContext\n  }, jsx(Box, _extends({\n    ref: ref\n  }, rest), typeof children === \"function\" ? children({\n    isEditing: isEditing,\n    onSubmit: handleSubmit,\n    onCancel: handleCancel,\n    onRequestEdit: onRequestEdit\n  }) : children));\n});\nEditable.displayName = \"Editable\";\nvar sharedProps = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\",\n  transition: \"all 0.2s\",\n  borderRadius: \"md\",\n  px: \"3px\",\n  mx: \"-3px\"\n};\nexport var EditablePreview = function EditablePreview(props) {\n  var _useContext = useContext(EditableContext),\n      isEditing = _useContext.isEditing,\n      isDisabled = _useContext.isDisabled,\n      value = _useContext.value,\n      onRequestEdit = _useContext.onRequestEdit,\n      placeholder = _useContext.placeholder,\n      isPreviewFocusable = _useContext.isPreviewFocusable;\n\n  var hasValue = value != null && value !== \"\";\n\n  var getTabIndex = function getTabIndex() {\n    if ((!isEditing || !isDisabled) && isPreviewFocusable) {\n      return 0;\n    }\n\n    return null;\n  };\n\n  var styleProps = _objectSpread({}, sharedProps, {\n    cursor: \"text\",\n    display: \"inline-block\",\n    opacity: !hasValue ? 0.6 : undefined\n  });\n\n  if (isEditing) {\n    return null;\n  }\n\n  return jsx(PseudoBox, _extends({\n    as: \"span\",\n    \"aria-disabled\": isDisabled,\n    tabIndex: getTabIndex(),\n    onFocus: onRequestEdit\n  }, styleProps, props), hasValue ? value : placeholder);\n};\nexport var EditableInput = function EditableInput(props) {\n  var _useContext2 = useContext(EditableContext),\n      inputRef = _useContext2.inputRef,\n      isEditing = _useContext2.isEditing,\n      onChange = _useContext2.onChange,\n      onKeyDown = _useContext2.onKeyDown,\n      value = _useContext2.value,\n      onSubmit = _useContext2.onSubmit,\n      submitOnBlur = _useContext2.submitOnBlur,\n      placeholder = _useContext2.placeholder,\n      isDisabled = _useContext2.isDisabled;\n\n  if (!isEditing) {\n    return null;\n  }\n\n  var styleProps = _objectSpread({}, sharedProps, {\n    width: \"full\",\n    _placeholder: {\n      opacity: \"0.6\"\n    }\n  });\n\n  var renderProps = {\n    ref: inputRef,\n    onBlur: function onBlur(event) {\n      submitOnBlur && onSubmit();\n\n      if (props.onBlur) {\n        props.onBlur(event);\n      }\n    },\n    value: value,\n    placeholder: placeholder,\n    onChange: onChange,\n    onKeyDown: onKeyDown\n  };\n  return props.children ? props.children(renderProps) : jsx(PseudoBox, _extends({\n    \"aria-disabled\": isDisabled,\n    disabled: isDisabled,\n    as: \"input\",\n    outline: \"none\",\n    _focus: {\n      shadow: \"outline\"\n    }\n  }, renderProps, styleProps, props));\n};\nexport default Editable;","map":null,"metadata":{},"sourceType":"module"}