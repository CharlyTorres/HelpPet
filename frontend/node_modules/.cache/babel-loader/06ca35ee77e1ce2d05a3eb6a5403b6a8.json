{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport { jsx } from \"@emotion/core\";\nimport { useId } from \"@reach/auto-id\";\nimport { Children, cloneElement, createContext, useContext, useEffect, useRef, useState } from \"react\";\nimport Box from \"../Box\";\nimport CloseButton from \"../CloseButton\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport Popper, { PopperArrow } from \"../Popper\";\nimport usePrevious from \"../usePrevious\";\nimport { wrapEvent } from \"../utils\";\n/**\n * Hook based idea:\n * const {referenceProps, popoverProps, arrowProps, state, actions} = usePopover(props).\n *\n * The popover must meet the AA Success Criterion\n * https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n * https://www.w3.org/WAI/WCAG21/Techniques/client-side-script/SCR39\n */\n\nvar PopoverContext = createContext();\n\nvar usePopoverContext = function usePopoverContext() {\n  var context = useContext(PopoverContext);\n\n  if (context == null) {\n    throw Error(\"usePopoverContext must be used within <Popover/>\");\n  }\n\n  return context;\n}; /////////////////////////////////////////////////////////////////////\n\n\nvar PopoverTrigger = function PopoverTrigger(_ref) {\n  var children = _ref.children;\n\n  var _usePopoverContext = usePopoverContext(),\n      referenceRef = _usePopoverContext.referenceRef,\n      popoverId = _usePopoverContext.popoverId,\n      onToggle = _usePopoverContext.onToggle,\n      trigger = _usePopoverContext.trigger,\n      onOpen = _usePopoverContext.onOpen,\n      isOpen = _usePopoverContext.isOpen,\n      onClose = _usePopoverContext.onClose,\n      isHoveringRef = _usePopoverContext.isHoveringRef;\n\n  var child = Children.only(children);\n  var eventHandlers = {};\n\n  if (trigger === \"click\") {\n    eventHandlers = {\n      onClick: wrapEvent(child.props.onClick, onToggle)\n    };\n  }\n\n  if (trigger === \"hover\") {\n    eventHandlers = {\n      onFocus: wrapEvent(child.props.onFocus, onOpen),\n      onKeyDown: wrapEvent(child.props.onKeyDown, function (event) {\n        if (event.key === \"Escape\") {\n          setTimeout(onClose, 300);\n        }\n      }),\n      onBlur: wrapEvent(child.props.onBlur, onClose),\n      onMouseEnter: wrapEvent(child.props.onMouseEnter, function () {\n        isHoveringRef.current = true;\n        setTimeout(onOpen, 300);\n      }),\n      onMouseLeave: wrapEvent(child.props.onMouseLeave, function () {\n        isHoveringRef.current = false;\n        setTimeout(function () {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, 300);\n      })\n    };\n  }\n\n  return cloneElement(child, _objectSpread({\n    \"aria-haspopup\": \"dialog\",\n    \"aria-expanded\": isOpen,\n    \"aria-controls\": popoverId,\n    ref: referenceRef\n  }, eventHandlers));\n}; /////////////////////////////////////////////////////////////////////\n\n\nvar PopoverContent = function PopoverContent(_ref2) {\n  var onKeyDown = _ref2.onKeyDown,\n      onBlurProp = _ref2.onBlur,\n      onMouseLeave = _ref2.onMouseLeave,\n      onMouseEnter = _ref2.onMouseEnter,\n      onFocus = _ref2.onFocus,\n      _ref2$gutter = _ref2.gutter,\n      gutter = _ref2$gutter === void 0 ? 4 : _ref2$gutter,\n      ariaLabel = _ref2[\"aria-label\"],\n      props = _objectWithoutPropertiesLoose(_ref2, [\"onKeyDown\", \"onBlur\", \"onMouseLeave\", \"onMouseEnter\", \"onFocus\", \"gutter\", \"aria-label\"]);\n\n  var _usePopoverContext2 = usePopoverContext(),\n      popoverRef = _usePopoverContext2.popoverRef,\n      referenceRef = _usePopoverContext2.referenceRef,\n      placement = _usePopoverContext2.placement,\n      popoverId = _usePopoverContext2.popoverId,\n      isOpen = _usePopoverContext2.isOpen,\n      onBlur = _usePopoverContext2.onBlur,\n      closeOnEsc = _usePopoverContext2.closeOnEsc,\n      onClose = _usePopoverContext2.onClose,\n      isHoveringRef = _usePopoverContext2.isHoveringRef,\n      trigger = _usePopoverContext2.trigger,\n      headerId = _usePopoverContext2.headerId,\n      bodyId = _usePopoverContext2.bodyId,\n      usePortal = _usePopoverContext2.usePortal;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var bg = colorMode === \"light\" ? \"white\" : \"gray.700\";\n  var eventHandlers = {};\n  var roleProps = {};\n\n  if (trigger === \"click\") {\n    eventHandlers = {\n      onBlur: wrapEvent(onBlurProp, onBlur)\n    };\n    roleProps = {\n      role: \"dialog\",\n      \"aria-modal\": \"false\"\n    };\n  }\n\n  if (trigger === \"hover\") {\n    eventHandlers = {\n      onMouseEnter: wrapEvent(onMouseEnter, function () {\n        isHoveringRef.current = true;\n      }),\n      onMouseLeave: wrapEvent(onMouseLeave, function () {\n        isHoveringRef.current = false;\n        setTimeout(onClose, 300);\n      })\n    };\n    roleProps = {\n      role: \"tooltip\"\n    };\n  }\n\n  eventHandlers = _objectSpread({}, eventHandlers, {\n    onKeyDown: wrapEvent(onKeyDown, function (event) {\n      if (event.key === \"Escape\" && closeOnEsc) {\n        onClose && onClose();\n      }\n    })\n  });\n  return jsx(Popper, _extends({\n    as: \"section\",\n    usePortal: usePortal,\n    isOpen: isOpen,\n    placement: placement,\n    \"aria-label\": ariaLabel,\n    anchorEl: referenceRef.current,\n    ref: popoverRef,\n    bg: bg,\n    id: popoverId,\n    \"aria-hidden\": !isOpen,\n    tabIndex: \"-1\",\n    borderWidth: \"1px\",\n    width: \"100%\",\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    rounded: \"md\",\n    shadow: \"sm\",\n    maxWidth: \"xs\",\n    modifiers: {\n      offset: {\n        enabled: true,\n        offset: \"0, \" + gutter\n      }\n    },\n    _focus: {\n      outline: 0,\n      shadow: \"outline\"\n    },\n    \"aria-labelledby\": headerId,\n    \"aria-describedby\": bodyId\n  }, roleProps, eventHandlers, props));\n}; /////////////////////////////////////////////////////////////////////\n\n\nvar Popover = function Popover(_ref3) {\n  var id = _ref3.id,\n      isOpenProp = _ref3.isOpen,\n      initialFocusRef = _ref3.initialFocusRef,\n      defaultIsOpen = _ref3.defaultIsOpen,\n      _ref3$usePortal = _ref3.usePortal,\n      usePortal = _ref3$usePortal === void 0 ? false : _ref3$usePortal,\n      _ref3$returnFocusOnCl = _ref3.returnFocusOnClose,\n      returnFocusOnClose = _ref3$returnFocusOnCl === void 0 ? true : _ref3$returnFocusOnCl,\n      _ref3$trigger = _ref3.trigger,\n      trigger = _ref3$trigger === void 0 ? \"click\" : _ref3$trigger,\n      placement = _ref3.placement,\n      children = _ref3.children,\n      _ref3$closeOnBlur = _ref3.closeOnBlur,\n      closeOnBlur = _ref3$closeOnBlur === void 0 ? true : _ref3$closeOnBlur,\n      _ref3$closeOnEsc = _ref3.closeOnEsc,\n      closeOnEsc = _ref3$closeOnEsc === void 0 ? true : _ref3$closeOnEsc,\n      onOpenProp = _ref3.onOpen,\n      onCloseProp = _ref3.onClose;\n\n  var _useState = useState(defaultIsOpen || false),\n      isOpen = _useState[0],\n      setIsOpen = _useState[1];\n\n  var _useRef = useRef(isOpenProp != null),\n      isControlled = _useRef.current;\n\n  var isHoveringRef = useRef();\n  var referenceRef = useRef();\n  var popoverRef = useRef();\n\n  var _isOpen = isControlled ? isOpenProp : isOpen;\n\n  var onToggle = function onToggle() {\n    if (!isControlled) {\n      setIsOpen(!_isOpen);\n    }\n\n    if (!_isOpen === true) {\n      onOpenProp && onOpenProp();\n    } else {\n      onCloseProp && onCloseProp();\n    }\n  };\n\n  var onOpen = function onOpen() {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    if (onOpenProp) {\n      onOpenProp();\n    }\n  };\n\n  var onClose = function onClose() {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    if (onCloseProp) {\n      onCloseProp();\n    }\n  };\n\n  var handleBlur = function handleBlur(event) {\n    if (_isOpen && closeOnBlur && popoverRef.current && referenceRef.current && !popoverRef.current.contains(event.relatedTarget) && !referenceRef.current.contains(event.relatedTarget)) {\n      onClose();\n    }\n  }; // A unique fallback id in case the id prop wasn't passed\n\n\n  var fallbackId = \"popover-\" + useId();\n  var popoverId = id || fallbackId;\n  var headerId = popoverId + \"-header\";\n  var bodyId = popoverId + \"-body\";\n  var prevIsOpen = usePrevious(_isOpen);\n  useEffect(function () {\n    if (_isOpen && trigger === \"click\") {\n      requestAnimationFrame(function () {\n        if (initialFocusRef && initialFocusRef.current) {\n          initialFocusRef.current.focus();\n        } else {\n          if (popoverRef.current) {\n            popoverRef.current.focus();\n          }\n        }\n      });\n    }\n\n    if (!_isOpen && prevIsOpen && trigger === \"click\" && returnFocusOnClose) {\n      if (referenceRef.current) {\n        referenceRef.current.focus();\n      }\n    }\n  }, [_isOpen, popoverRef, initialFocusRef, trigger, referenceRef, prevIsOpen, returnFocusOnClose]);\n  var context = {\n    popoverRef: popoverRef,\n    placement: placement,\n    referenceRef: referenceRef,\n    headerId: headerId,\n    bodyId: bodyId,\n    popoverId: popoverId,\n    onOpen: onOpen,\n    onClose: onClose,\n    onToggle: onToggle,\n    trigger: trigger,\n    isOpen: _isOpen,\n    onBlur: handleBlur,\n    closeOnEsc: closeOnEsc,\n    initialFocusRef: initialFocusRef,\n    isHoveringRef: isHoveringRef,\n    usePortal: usePortal\n  };\n  return jsx(PopoverContext.Provider, {\n    value: context\n  }, typeof children === \"function\" ? children({\n    isOpen: _isOpen,\n    onClose: onClose\n  }) : children);\n}; /////////////////////////////////////////////////////////////////////\n\n\nvar PopoverHeader = function PopoverHeader(props) {\n  var _usePopoverContext3 = usePopoverContext(),\n      headerId = _usePopoverContext3.headerId;\n\n  return jsx(Box, _extends({\n    as: \"header\",\n    id: headerId,\n    px: 3,\n    py: 2,\n    borderBottomWidth: \"1px\"\n  }, props));\n}; /////////////////////////////////////////////////////////////////////\n\n\nvar PopoverFooter = function PopoverFooter(props) {\n  return jsx(Box, _extends({\n    as: \"footer\",\n    px: 3,\n    py: 2,\n    borderTopWidth: \"1px\"\n  }, props));\n}; /////////////////////////////////////////////////////////////////////\n\n\nvar PopoverBody = function PopoverBody(props) {\n  var _usePopoverContext4 = usePopoverContext(),\n      bodyId = _usePopoverContext4.bodyId;\n\n  return jsx(Box, _extends({\n    id: bodyId,\n    flex: \"1\",\n    px: 3,\n    py: 2\n  }, props));\n}; /////////////////////////////////////////////////////////////////////\n\n\nvar PopoverArrow = function PopoverArrow(props) {\n  return jsx(PopperArrow, props);\n}; /////////////////////////////////////////////////////////////////////\n\n\nvar PopoverCloseButton = function PopoverCloseButton(_ref4) {\n  var onClick = _ref4.onClick,\n      props = _objectWithoutPropertiesLoose(_ref4, [\"onClick\"]);\n\n  var _usePopoverContext5 = usePopoverContext(),\n      onClose = _usePopoverContext5.onClose;\n\n  return jsx(CloseButton, _extends({\n    size: \"sm\",\n    onClick: wrapEvent(onClick, onClose),\n    \"aria-label\": \"Close\",\n    pos: \"absolute\",\n    rounded: \"md\",\n    top: 1,\n    right: 2,\n    p: 2\n  }, props));\n}; /////////////////////////////////////////////////////////////////////\n\n\nexport { PopoverHeader, PopoverFooter, PopoverBody, Popover, PopoverTrigger, PopoverContent, PopoverArrow, PopoverCloseButton };","map":null,"metadata":{},"sourceType":"module"}