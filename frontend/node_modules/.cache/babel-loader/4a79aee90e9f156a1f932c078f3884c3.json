{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n} // The approach here is to allow developers to render a visual <Alert> and then\n// we mirror that to a couple of aria live regions behind the scenes. This way,\n// most of the time, developers don't have to think about visual vs. aria\n// alerts.\n//\n// Limitations: Developers can't read from context inside of an Alert because\n// we aren't using ReactDOM.createPortal(), we're actually creating a couple of\n// brand new React roots. We could use createPortal but then apps would need to\n// render the entire app tree in an <AlertProvider>, or maybe there's a way\n// with default context to do it, but we haven't explored that yet. So, we'll\n// see how this goes, and if it becomes a problem, we can introduce a portal\n// later.\n\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport Component from \"@reach/component-component\";\nimport VisuallyHidden from \"@reach/visually-hidden\";\nimport { node, string } from \"prop-types\"; // singleton state is fine because you don't server render\n// an alert (SRs don't read them on first load anyway)\n\nvar keys = {\n  polite: -1,\n  assertive: -1\n};\nvar elements = {\n  polite: {},\n  assertive: {}\n};\nvar liveRegions = {\n  polite: null,\n  assertive: null\n};\nvar renderTimer = null;\n\nvar renderAlerts = function renderAlerts() {\n  clearTimeout(renderTimer);\n  renderTimer = setTimeout(function () {\n    Object.keys(elements).forEach(function (type) {\n      var container = liveRegions[type];\n\n      if (container) {\n        render(React.createElement(VisuallyHidden, null, React.createElement(\"div\", {\n          role: type === \"assertive\" ? \"alert\" : \"status\",\n          \"aria-live\": type\n        }, Object.keys(elements[type]).map(function (key) {\n          return React.cloneElement(elements[type][key], {\n            key: key\n          });\n        }))), liveRegions[type]);\n      }\n    });\n  }, 500);\n};\n\nvar createMirror = function createMirror(type) {\n  var key = ++keys[type];\n\n  var mount = function mount(element) {\n    if (liveRegions[type]) {\n      elements[type][key] = element;\n      renderAlerts();\n    } else {\n      var _node = document.createElement(\"div\");\n\n      _node.setAttribute(\"data-reach-live-\" + type, \"true\");\n\n      liveRegions[type] = _node;\n      document.body.appendChild(liveRegions[type]);\n      mount(element);\n    }\n  };\n\n  var update = function update(element) {\n    elements[type][key] = element;\n    renderAlerts();\n  };\n\n  var unmount = function unmount(element) {\n    delete elements[type][key];\n    renderAlerts();\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount\n  };\n};\n\nvar Alert = function Alert(_ref) {\n  var children = _ref.children,\n      type = _ref.type,\n      props = _objectWithoutProperties(_ref, [\"children\", \"type\"]);\n\n  var element = React.createElement(\"div\", _extends({}, props, {\n    \"data-reach-alert\": true\n  }), children);\n  return React.createElement(Component, {\n    type: type,\n    getRefs: function getRefs() {\n      return {\n        mirror: createMirror(type)\n      };\n    },\n    didMount: function didMount(_ref2) {\n      var refs = _ref2.refs;\n      return refs.mirror.mount(element);\n    },\n    didUpdate: function didUpdate(_ref3) {\n      var refs = _ref3.refs,\n          prevProps = _ref3.prevProps;\n\n      if (prevProps.type !== type) {\n        refs.mirror.unmount();\n        refs.mirror = createMirror(type);\n        refs.mirror.mount(element);\n      } else {\n        refs.mirror.update(element, prevProps.type, type);\n      }\n    },\n    willUnmount: function willUnmount(_ref4) {\n      var refs = _ref4.refs;\n      return refs.mirror.unmount(element);\n    },\n    children: element\n  });\n};\n\nprocess.env.NODE_ENV !== \"production\" ? Alert.propTypes = {\n  children: node,\n  type: string\n} : void 0;\nAlert.defaultProps = {\n  type: \"polite\"\n};\nexport default Alert;","map":null,"metadata":{},"sourceType":"module"}