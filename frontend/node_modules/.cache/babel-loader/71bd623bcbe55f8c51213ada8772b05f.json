{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Popper Component\n *\n * The following code is a derivative of the amazing work done by the Material UI team.\n * Original source: https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Popper/Popper.js\n */\n\n/** @jsx jsx */\n\n\nimport { jsx } from \"@emotion/core\";\nimport React, { forwardRef, useEffect, useLayoutEffect, useRef, useImperativeHandle, useState, useCallback } from \"react\";\nimport PopperJS from \"popper.js\";\nimport Portal from \"../Portal\";\nimport PseudoBox from \"../PseudoBox\";\nimport Box from \"../Box\";\nimport { useForkRef, setRef, createChainedFunction } from \"../utils\";\nimport getPopperArrowStyle from \"./styles\";\n/**\n * Flips placement if in <body dir=\"rtl\" />\n * @param {string} placement\n */\n\nfunction flipPlacement(placement) {\n  var direction = typeof window !== \"undefined\" && document.body.getAttribute(\"dir\") || \"ltr\";\n\n  if (direction !== \"rtl\") {\n    return placement;\n  }\n\n  switch (placement) {\n    case \"bottom-end\":\n      return \"bottom-start\";\n\n    case \"bottom-start\":\n      return \"bottom-end\";\n\n    case \"top-end\":\n      return \"top-start\";\n\n    case \"top-start\":\n      return \"top-end\";\n\n    default:\n      return placement;\n  }\n}\n\nfunction getAnchorEl(anchorEl) {\n  return typeof anchorEl === \"function\" ? anchorEl() : anchorEl;\n}\n\nvar useEnhancedEffect = typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\nvar Popper = forwardRef(function (_ref, ref) {\n  var anchorEl = _ref.anchorEl,\n      children = _ref.children,\n      gutter = _ref.gutter,\n      container = _ref.container,\n      _ref$usePortal = _ref.usePortal,\n      usePortal = _ref$usePortal === void 0 ? true : _ref$usePortal,\n      _ref$unmountOnExit = _ref.unmountOnExit,\n      unmountOnExit = _ref$unmountOnExit === void 0 ? true : _ref$unmountOnExit,\n      modifiers = _ref.modifiers,\n      isOpen = _ref.isOpen,\n      _ref$placement = _ref.placement,\n      initialPlacement = _ref$placement === void 0 ? \"bottom\" : _ref$placement,\n      _ref$popperOptions = _ref.popperOptions,\n      popperOptions = _ref$popperOptions === void 0 ? {} : _ref$popperOptions,\n      popperRefProp = _ref.popperRef,\n      _ref$willUseTransitio = _ref.willUseTransition,\n      willUseTransition = _ref$willUseTransitio === void 0 ? false : _ref$willUseTransitio,\n      arrowSize = _ref.arrowSize,\n      arrowShadowColor = _ref.arrowShadowColor,\n      hasArrow = _ref.hasArrow,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"anchorEl\", \"children\", \"gutter\", \"container\", \"usePortal\", \"unmountOnExit\", \"modifiers\", \"isOpen\", \"placement\", \"popperOptions\", \"popperRef\", \"willUseTransition\", \"arrowSize\", \"arrowShadowColor\", \"hasArrow\"]);\n\n  var tooltipRef = useRef(null);\n  var ownRef = useForkRef(tooltipRef, ref);\n  var popperRef = useRef(null);\n  var handlePopperRef = useForkRef(popperRef, popperRefProp);\n  var handlePopperRefRef = useRef(handlePopperRef);\n  useEnhancedEffect(function () {\n    handlePopperRefRef.current = handlePopperRef;\n  }, [handlePopperRef]);\n  useImperativeHandle(popperRefProp, function () {\n    return popperRef.current;\n  }, []);\n\n  var _useState = useState(true),\n      exited = _useState[0],\n      setExited = _useState[1];\n\n  var rtlPlacement = flipPlacement(initialPlacement);\n\n  var _useState2 = useState(rtlPlacement),\n      placement = _useState2[0],\n      setPlacement = _useState2[1];\n\n  if (rtlPlacement !== placement) {\n    setPlacement(rtlPlacement);\n  }\n\n  var handleOpen = useCallback(function () {\n    var popperNode = tooltipRef.current;\n\n    if (!popperNode || !anchorEl || !isOpen) {\n      return;\n    }\n\n    if (popperRef.current) {\n      popperRef.current.destroy();\n      handlePopperRefRef.current(null);\n    }\n\n    var handlePopperUpdate = function handlePopperUpdate(data) {\n      setPlacement(data.placement);\n    };\n\n    var popper = new PopperJS(getAnchorEl(anchorEl), popperNode, _objectSpread({\n      placement: rtlPlacement\n    }, popperOptions, {\n      modifiers: _objectSpread({}, usePortal && {\n        preventOverflow: {\n          boundariesElement: \"window\"\n        }\n      }, {}, modifiers, {}, popperOptions.modifiers),\n      onUpdate: createChainedFunction(handlePopperUpdate, popperOptions.onUpdate)\n    }));\n    handlePopperRefRef.current(popper);\n  }, [anchorEl, usePortal, modifiers, isOpen, rtlPlacement, popperOptions]);\n  var handleRef = useCallback(function (node) {\n    setRef(ownRef, node);\n    handleOpen();\n  }, [ownRef, handleOpen]);\n\n  var handleEnter = function handleEnter() {\n    setExited(false);\n  };\n\n  var handleClose = function handleClose() {\n    if (!popperRef.current) {\n      return;\n    }\n\n    popperRef.current.destroy();\n    handlePopperRefRef.current(null);\n  };\n\n  var handleExited = function handleExited() {\n    setExited(true);\n    handleClose();\n  };\n\n  useEffect(function () {\n    handleOpen();\n  }, [handleOpen]);\n  useEffect(function () {\n    return function () {\n      handleClose();\n    };\n  }, []);\n  useEffect(function () {\n    if (!isOpen && !willUseTransition) {\n      handleClose();\n    }\n  }, [isOpen, willUseTransition]);\n\n  if (unmountOnExit && !isOpen && (!willUseTransition || exited)) {\n    return null;\n  }\n\n  var childProps = {\n    placement: placement\n  };\n\n  if (willUseTransition) {\n    childProps.transition = {\n      \"in\": isOpen,\n      onEnter: handleEnter,\n      onExited: handleExited\n    };\n  }\n\n  return jsx(Portal, {\n    isDisabled: !usePortal,\n    container: container\n  }, jsx(PseudoBox, _extends({\n    ref: handleRef,\n    pos: \"absolute\",\n    css: getPopperArrowStyle({\n      arrowSize: arrowSize,\n      arrowShadowColor: arrowShadowColor,\n      hasArrow: hasArrow\n    })\n  }, rest), typeof children === \"function\" ? children(childProps) : children));\n});\nexport default Popper;\nexport var PopperArrow = function PopperArrow(props) {\n  return jsx(Box, _extends({\n    \"x-arrow\": \"\",\n    role: \"presentation\",\n    bg: \"inherit\"\n  }, props));\n};","map":null,"metadata":{},"sourceType":"module"}