{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { Children, cloneElement, createContext, forwardRef, useContext, useRef, useState, isValidElement } from \"react\";\nimport { useId } from \"@reach/auto-id\";\nimport { assignRef, useVariantColorWarning } from \"../utils\";\nimport { useTabStyle, useTabListStyle } from \"./styles\";\nimport PseudoBox from \"../PseudoBox\";\nimport Flex from \"../Flex\";\nimport Box from \"../Box\";\nvar Tab = forwardRef(function (props, ref) {\n  var isSelected = props.isSelected,\n      isDisabled = props.isDisabled,\n      id = props.id,\n      size = props.size,\n      rest = _objectWithoutPropertiesLoose(props, [\"isSelected\", \"isDisabled\", \"id\", \"size\"]);\n\n  var tabStyleProps = useTabStyle();\n  return jsx(PseudoBox, _extends({\n    ref: ref,\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    id: \"tab:\" + id,\n    outline: \"none\",\n    as: \"button\",\n    type: \"button\",\n    disabled: isDisabled,\n    \"aria-selected\": isSelected,\n    \"aria-disabled\": isDisabled,\n    \"aria-controls\": \"panel:\" + id\n  }, tabStyleProps, rest));\n});\nTab.displayName = \"Tab\"; ////////////////////////////////////////////////////////////////////////\n\nvar TabList = forwardRef(function (props, ref) {\n  var children = props.children,\n      onKeyDown = props.onKeyDown,\n      onClick = props.onClick,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"onKeyDown\", \"onClick\"]);\n\n  var _useContext = useContext(TabContext),\n      id = _useContext.id,\n      selectedIndex = _useContext.index,\n      manualIndex = _useContext.manualIndex,\n      onManualTabChange = _useContext.onManualTabChange,\n      isManual = _useContext.isManual,\n      onChangeTab = _useContext.onChangeTab,\n      onFocusPanel = _useContext.onFocusPanel,\n      orientation = _useContext.orientation;\n\n  var tabListStyleProps = useTabListStyle();\n  var allNodes = useRef([]);\n  var focusableIndexes = Children.map(children, function (child, index) {\n    return child.props.isDisabled === true ? null : index;\n  }).filter(function (index) {\n    return index != null;\n  });\n  var enabledSelectedIndex = focusableIndexes.indexOf(selectedIndex);\n  var count = focusableIndexes.length;\n\n  var updateIndex = function updateIndex(index) {\n    var childIndex = focusableIndexes[index];\n    allNodes.current[childIndex].focus();\n    onChangeTab && onChangeTab(childIndex);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (event.key === \"ArrowRight\") {\n      event.preventDefault();\n      var nextIndex = (enabledSelectedIndex + 1) % count;\n      updateIndex(nextIndex);\n    }\n\n    if (event.key === \"ArrowLeft\" || event.key === \"ArrowUp\") {\n      event.preventDefault();\n\n      var _nextIndex = (enabledSelectedIndex - 1 + count) % count;\n\n      updateIndex(_nextIndex);\n    }\n\n    if (event.key === \"Home\") {\n      event.preventDefault();\n      updateIndex(0);\n    }\n\n    if (event.key === \"End\") {\n      event.preventDefault();\n      updateIndex(count - 1);\n    }\n\n    if (event.key === \"ArrowDown\") {\n      event.preventDefault();\n      onFocusPanel && onFocusPanel();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  var clones = Children.map(children, function (child, index) {\n    var isSelected = isManual ? index === manualIndex : index === selectedIndex;\n\n    var handleClick = function handleClick(event) {\n      // Hack for Safari. Buttons don't receive focus on click on Safari\n      // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus\n      allNodes.current[index].focus();\n      onManualTabChange(index);\n      onChangeTab(index);\n\n      if (child.props.onClick) {\n        child.props.onClick(event);\n      }\n    };\n\n    return cloneElement(child, {\n      ref: function ref(node) {\n        return allNodes.current[index] = node;\n      },\n      isSelected: isSelected,\n      onClick: handleClick,\n      id: id + \"-\" + index\n    });\n  });\n  return jsx(Flex, _extends({\n    onKeyDown: handleKeyDown,\n    ref: ref,\n    role: \"tablist\",\n    \"aria-orientation\": orientation\n  }, tabListStyleProps, rest), clones);\n});\nTabList.displayName = \"TabList\"; ////////////////////////////////////////////////////////////////////////\n\nvar TabPanel = forwardRef(function (_ref, _ref2) {\n  var children = _ref.children,\n      isSelected = _ref.isSelected,\n      selectedPanelRef = _ref.selectedPanelRef,\n      id = _ref.id,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"children\", \"isSelected\", \"selectedPanelRef\", \"id\"]);\n\n  return jsx(Box, _extends({\n    ref: function ref(node) {\n      if (isSelected) {\n        assignRef(selectedPanelRef, node);\n      }\n\n      assignRef(_ref2, node);\n    },\n    role: \"tabpanel\",\n    tabIndex: -1,\n    \"aria-labelledby\": \"tab:\" + id,\n    hidden: !isSelected,\n    id: \"panel:\" + id,\n    outline: 0\n  }, rest), children);\n});\nTabPanel.displayName = \"TabPanel\"; ////////////////////////////////////////////////////////////////////////\n\nvar TabPanels = forwardRef(function (_ref3, ref) {\n  var children = _ref3.children,\n      rest = _objectWithoutPropertiesLoose(_ref3, [\"children\"]);\n\n  var _useContext2 = useContext(TabContext),\n      selectedIndex = _useContext2.index,\n      selectedPanelRef = _useContext2.selectedPanelRef,\n      id = _useContext2.id,\n      isManual = _useContext2.isManual,\n      manualIndex = _useContext2.manualIndex;\n\n  var clones = Children.map(children, function (child, index) {\n    if (!isValidElement(child)) return;\n    return cloneElement(child, {\n      isSelected: isManual ? index === manualIndex : index === selectedIndex,\n      selectedPanelRef: selectedPanelRef,\n      id: id + \"-\" + index\n    });\n  });\n  return jsx(Box, _extends({\n    tabIndex: \"-1\",\n    ref: ref\n  }, rest), clones);\n});\nTabPanels.displayName = \"TabPanels\"; ////////////////////////////////////////////////////////////////////////\n\nexport var TabContext = createContext();\nvar Tabs = forwardRef(function (_ref4, ref) {\n  var children = _ref4.children,\n      onChange = _ref4.onChange,\n      controlledIndex = _ref4.index,\n      defaultIndex = _ref4.defaultIndex,\n      isManual = _ref4.isManual,\n      _ref4$variant = _ref4.variant,\n      variant = _ref4$variant === void 0 ? \"line\" : _ref4$variant,\n      _ref4$variantColor = _ref4.variantColor,\n      variantColor = _ref4$variantColor === void 0 ? \"blue\" : _ref4$variantColor,\n      _ref4$align = _ref4.align,\n      align = _ref4$align === void 0 ? \"start\" : _ref4$align,\n      _ref4$size = _ref4.size,\n      size = _ref4$size === void 0 ? \"md\" : _ref4$size,\n      _ref4$orientation = _ref4.orientation,\n      orientation = _ref4$orientation === void 0 ? \"horizontal\" : _ref4$orientation,\n      isFitted = _ref4.isFitted,\n      props = _objectWithoutPropertiesLoose(_ref4, [\"children\", \"onChange\", \"index\", \"defaultIndex\", \"isManual\", \"variant\", \"variantColor\", \"align\", \"size\", \"orientation\", \"isFitted\"]); // Wrong usage of `variantColor` prop is quite common\n  // Let's add a warning hook that validates the passed variantColor\n\n\n  useVariantColorWarning(\"Tabs\", variantColor);\n\n  var _useRef = useRef(controlledIndex != null),\n      isControlled = _useRef.current;\n\n  var selectedPanelRef = useRef();\n\n  var getInitialIndex = function getInitialIndex() {\n    if (!isManual) {\n      return defaultIndex || 0;\n    } else {\n      return controlledIndex || defaultIndex || 0;\n    }\n  };\n\n  var getActualIdx = function getActualIdx() {\n    if (isManual) {\n      return selectedIndex;\n    } else {\n      return isControlled ? controlledIndex : selectedIndex;\n    }\n  };\n\n  var _useState = useState(getInitialIndex),\n      selectedIndex = _useState[0],\n      setSelectedIndex = _useState[1];\n\n  var _useState2 = useState(controlledIndex || defaultIndex || 0),\n      manualIndex = _useState2[0],\n      setManualIndex = _useState2[1];\n\n  var actualIdx = getActualIdx();\n  var manualIdx = isControlled ? controlledIndex : manualIndex;\n\n  var onChangeTab = function onChangeTab(index) {\n    if (!isControlled) {\n      setSelectedIndex(index);\n    }\n\n    if (isControlled && isManual) {\n      setSelectedIndex(index);\n    }\n\n    if (!isManual) {\n      onChange && onChange(index);\n    }\n  };\n\n  var onManualTabChange = function onManualTabChange(index) {\n    if (!isControlled) {\n      setManualIndex(index);\n    }\n\n    if (isManual) {\n      onChange && onChange(index);\n    }\n  };\n\n  var onFocusPanel = function onFocusPanel() {\n    if (selectedPanelRef.current) {\n      selectedPanelRef.current.focus();\n    }\n  };\n\n  var id = useId();\n  var context = {\n    id: id,\n    index: actualIdx,\n    manualIndex: manualIdx,\n    onManualTabChange: onManualTabChange,\n    isManual: isManual,\n    onChangeTab: onChangeTab,\n    selectedPanelRef: selectedPanelRef,\n    onFocusPanel: onFocusPanel,\n    color: variantColor,\n    size: size,\n    align: align,\n    variant: variant,\n    isFitted: isFitted,\n    orientation: orientation\n  };\n  return jsx(TabContext.Provider, {\n    value: context\n  }, jsx(Box, _extends({\n    ref: ref\n  }, props), children));\n});\nTabs.displayName = \"Tabs\";\nexport default Tabs;\nexport { TabList, Tab, TabPanel, TabPanels };","map":null,"metadata":{},"sourceType":"module"}