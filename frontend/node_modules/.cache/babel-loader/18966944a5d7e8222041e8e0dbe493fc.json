{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { useId } from \"@reach/auto-id\";\nimport { createContext, forwardRef, useContext, useEffect, useRef, useState } from \"react\";\nimport Box from \"../Box\";\nimport PseudoBox from \"../PseudoBox\";\nimport Text from \"../Text\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport usePrevious from \"../usePrevious\";\nimport { getFocusables, useForkRef, wrapEvent } from \"../utils\";\nimport { useMenuItemStyle, useMenuListStyle } from \"./styles\";\nimport Divider from \"../Divider\";\nimport Popper from \"../Popper\";\nvar MenuContext = createContext();\n\nvar Menu = function Menu(_ref) {\n  var children = _ref.children,\n      isOpenProp = _ref.isOpen,\n      defaultIsOpen = _ref.defaultIsOpen,\n      onOpen = _ref.onOpen,\n      onClose = _ref.onClose,\n      _ref$autoSelect = _ref.autoSelect,\n      autoSelect = _ref$autoSelect === void 0 ? true : _ref$autoSelect,\n      _ref$closeOnBlur = _ref.closeOnBlur,\n      closeOnBlur = _ref$closeOnBlur === void 0 ? true : _ref$closeOnBlur,\n      _ref$closeOnSelect = _ref.closeOnSelect,\n      closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect,\n      defaultActiveIndex = _ref.defaultActiveIndex,\n      placement = _ref.placement;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useState = useState(defaultActiveIndex || -1),\n      activeIndex = _useState[0],\n      setActiveIndex = _useState[1];\n\n  var _useState2 = useState(defaultIsOpen || false),\n      isOpen = _useState2[0],\n      setIsOpen = _useState2[1];\n\n  var _useRef = useRef(isOpenProp != null),\n      isControlled = _useRef.current;\n\n  var _isOpen = isControlled ? isOpenProp : isOpen;\n\n  var menuId = \"menu-\" + useId();\n  var buttonId = \"menubutton-\" + useId();\n  var focusableItems = useRef(null);\n  var menuRef = useRef(null);\n  var buttonRef = useRef(null);\n  useEffect(function () {\n    if (_isOpen && menuRef && menuRef.current) {\n      var focusables = getFocusables(menuRef.current).filter(function (node) {\n        return [\"menuitem\", \"menuitemradio\", \"menuitemcheckbox\"].includes(node.getAttribute(\"role\"));\n      });\n      focusableItems.current = menuRef.current ? focusables : [];\n      initTabIndex();\n    }\n  }, [_isOpen]);\n\n  var updateTabIndex = function updateTabIndex(index) {\n    if (focusableItems.current.length > 0) {\n      var nodeAtIndex = focusableItems.current[index];\n      focusableItems.current.forEach(function (node) {\n        if (node !== nodeAtIndex) {\n          node.setAttribute(\"tabindex\", -1);\n        }\n      });\n      nodeAtIndex.setAttribute(\"tabindex\", 0);\n    }\n  };\n\n  var resetTabIndex = function resetTabIndex() {\n    if (focusableItems.current) {\n      focusableItems.current.forEach(function (node) {\n        return node.setAttribute(\"tabindex\", -1);\n      });\n    }\n  };\n\n  var initTabIndex = function initTabIndex() {\n    focusableItems.current.forEach(function (node, index) {\n      return index === 0 && node.setAttribute(\"tabindex\", 0);\n    });\n  };\n\n  var wasPreviouslyOpen = usePrevious(_isOpen);\n  useEffect(function () {\n    if (activeIndex !== -1) {\n      focusableItems.current[activeIndex].focus();\n      updateTabIndex(activeIndex);\n    }\n\n    if (activeIndex === -1 && !_isOpen && wasPreviouslyOpen) {\n      buttonRef.current && buttonRef.current.focus();\n    }\n\n    if (activeIndex === -1 && _isOpen) {\n      menuRef.current && menuRef.current.focus();\n    }\n  }, [activeIndex, _isOpen, buttonRef, menuRef, wasPreviouslyOpen]);\n\n  var focusOnFirstItem = function focusOnFirstItem() {\n    openMenu();\n    setActiveIndex(0);\n  };\n\n  var openMenu = function openMenu() {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    if (onOpen) {\n      onOpen();\n    }\n  };\n\n  var focusAtIndex = function focusAtIndex(index) {\n    setActiveIndex(index);\n  };\n\n  var focusOnLastItem = function focusOnLastItem() {\n    openMenu();\n    setActiveIndex(focusableItems.current.length - 1);\n  };\n\n  var closeMenu = function closeMenu() {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    if (onClose) {\n      onClose();\n    }\n\n    setActiveIndex(-1);\n    resetTabIndex();\n  };\n\n  var context = {\n    activeIndex: activeIndex,\n    isOpen: _isOpen,\n    focusAtIndex: focusAtIndex,\n    focusOnLastItem: focusOnLastItem,\n    focusOnFirstItem: focusOnFirstItem,\n    closeMenu: closeMenu,\n    buttonRef: buttonRef,\n    menuRef: menuRef,\n    focusableItems: focusableItems,\n    placement: placement,\n    menuId: menuId,\n    buttonId: buttonId,\n    openMenu: openMenu,\n    autoSelect: autoSelect,\n    closeOnSelect: closeOnSelect,\n    closeOnBlur: closeOnBlur,\n    colorMode: colorMode\n  };\n  return jsx(MenuContext.Provider, {\n    value: context\n  }, typeof children === \"function\" ? children({\n    isOpen: _isOpen,\n    onClose: closeMenu\n  }) : children);\n};\n\nexport function useMenuContext() {\n  var context = useContext(MenuContext);\n\n  if (context === undefined) {\n    throw new Error(\"useMenuContext must be used within a MenuContext Provider\");\n  }\n\n  return context;\n} //////////////////////////////////////////////////////////////////////////////////////////\n\nvar PseudoButton = forwardRef(function (props, ref) {\n  return jsx(PseudoBox, _extends({\n    ref: ref,\n    as: \"button\"\n  }, props));\n});\nPseudoButton.displayName = \"PseudoButton\";\nvar MenuButton = forwardRef(function (_ref2, ref) {\n  var onClick = _ref2.onClick,\n      onKeyDown = _ref2.onKeyDown,\n      _ref2$as = _ref2.as,\n      Comp = _ref2$as === void 0 ? PseudoButton : _ref2$as,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"onClick\", \"onKeyDown\", \"as\"]);\n\n  var _useMenuContext = useMenuContext(),\n      isOpen = _useMenuContext.isOpen,\n      focusOnLastItem = _useMenuContext.focusOnLastItem,\n      focusOnFirstItem = _useMenuContext.focusOnFirstItem,\n      closeMenu = _useMenuContext.closeMenu,\n      menuId = _useMenuContext.menuId,\n      buttonId = _useMenuContext.buttonId,\n      autoSelect = _useMenuContext.autoSelect,\n      openMenu = _useMenuContext.openMenu,\n      buttonRef = _useMenuContext.buttonRef;\n\n  var menuButtonRef = useForkRef(buttonRef, ref);\n  return jsx(Comp, _extends({\n    \"aria-haspopup\": \"menu\",\n    \"aria-expanded\": isOpen,\n    \"aria-controls\": menuId,\n    id: buttonId,\n    role: \"button\",\n    ref: menuButtonRef,\n    onClick: wrapEvent(onClick, function () {\n      if (isOpen) {\n        closeMenu();\n      } else {\n        if (autoSelect) {\n          focusOnFirstItem();\n        } else {\n          openMenu();\n        }\n      }\n    }),\n    onKeyDown: wrapEvent(onKeyDown, function (event) {\n      if (event.key === \"ArrowDown\") {\n        event.preventDefault();\n        focusOnFirstItem();\n      }\n\n      if (event.key === \"ArrowUp\") {\n        event.preventDefault();\n        focusOnLastItem();\n      }\n    })\n  }, rest));\n});\nMenuButton.displayName = \"MenuButton\"; //////////////////////////////////////////////////////////////////////////////////////////\n\nvar MenuList = function MenuList(_ref3) {\n  var onKeyDown = _ref3.onKeyDown,\n      onBlur = _ref3.onBlur,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"onKeyDown\", \"onBlur\"]);\n\n  var _useMenuContext2 = useMenuContext(),\n      index = _useMenuContext2.activeIndex,\n      isOpen = _useMenuContext2.isOpen,\n      focusAtIndex = _useMenuContext2.focusAtIndex,\n      focusOnFirstItem = _useMenuContext2.focusOnFirstItem,\n      focusOnLastItem = _useMenuContext2.focusOnLastItem,\n      closeMenu = _useMenuContext2.closeMenu,\n      focusableItems = _useMenuContext2.focusableItems,\n      buttonRef = _useMenuContext2.buttonRef,\n      menuId = _useMenuContext2.menuId,\n      buttonId = _useMenuContext2.buttonId,\n      menuRef = _useMenuContext2.menuRef,\n      closeOnBlur = _useMenuContext2.closeOnBlur,\n      placement = _useMenuContext2.placement;\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var count = focusableItems.current.length;\n    var nextIndex;\n\n    if (event.key === \"ArrowDown\") {\n      event.preventDefault();\n      nextIndex = (index + 1) % count;\n      focusAtIndex(nextIndex);\n    } else if (event.key === \"ArrowUp\") {\n      event.preventDefault();\n      nextIndex = (index - 1 + count) % count;\n      focusAtIndex(nextIndex);\n    } else if (event.key === \"Home\") {\n      focusOnFirstItem();\n    } else if (event.key === \"End\") {\n      focusOnLastItem();\n    } else if (event.key === \"Tab\") {\n      event.preventDefault();\n    } else if (event.key === \"Escape\") {\n      closeMenu();\n    } // Set focus based on first character\n\n\n    if (/^[a-z0-9_-]$/i.test(event.key)) {\n      event.stopPropagation();\n      event.preventDefault();\n      var foundNode = focusableItems.current.find(function (item) {\n        return item.textContent.toLowerCase().startsWith(event.key);\n      });\n\n      if (foundNode) {\n        nextIndex = focusableItems.current.indexOf(foundNode);\n        focusAtIndex(nextIndex);\n      }\n    }\n\n    onKeyDown && onKeyDown(event);\n  }; // Close the menu on blur\n\n\n  var handleBlur = function handleBlur(event) {\n    if (closeOnBlur && isOpen && menuRef.current && buttonRef.current && !menuRef.current.contains(event.relatedTarget) && !buttonRef.current.contains(event.relatedTarget)) {\n      closeMenu();\n    }\n\n    onBlur && onBlur(event);\n  };\n\n  var styleProps = useMenuListStyle();\n  return jsx(Popper, _extends({\n    usePortal: false,\n    isOpen: isOpen,\n    anchorEl: buttonRef.current,\n    placement: placement,\n    modifiers: {\n      preventOverflow: {\n        enabled: true,\n        boundariesElement: \"viewport\"\n      }\n    },\n    minW: \"3xs\",\n    rounded: \"md\",\n    role: \"menu\",\n    ref: menuRef,\n    id: menuId,\n    py: 2,\n    \"aria-labelledby\": buttonId,\n    onKeyDown: handleKeyDown,\n    onBlur: handleBlur,\n    tabIndex: -1,\n    zIndex: \"1\",\n    _focus: {\n      outline: 0\n    }\n  }, styleProps, props));\n}; //////////////////////////////////////////////////////////////////////////////////////////\n\n\nvar MenuItem = forwardRef(function (_ref4, ref) {\n  var isDisabled = _ref4.isDisabled,\n      onClick = _ref4.onClick,\n      onMouseLeave = _ref4.onMouseLeave,\n      onMouseEnter = _ref4.onMouseEnter,\n      onKeyDown = _ref4.onKeyDown,\n      _ref4$role = _ref4.role,\n      role = _ref4$role === void 0 ? \"menuitem\" : _ref4$role,\n      props = _objectWithoutPropertiesLoose(_ref4, [\"isDisabled\", \"onClick\", \"onMouseLeave\", \"onMouseEnter\", \"onKeyDown\", \"role\"]);\n\n  var _useMenuContext3 = useMenuContext(),\n      focusableItems = _useMenuContext3.focusableItems,\n      focusAtIndex = _useMenuContext3.focusAtIndex,\n      closeOnSelect = _useMenuContext3.closeOnSelect,\n      closeMenu = _useMenuContext3.closeMenu;\n\n  var styleProps = useMenuItemStyle();\n  return jsx(PseudoBox, _extends({\n    as: \"button\",\n    ref: ref,\n    display: \"flex\",\n    textDecoration: \"none\",\n    color: \"inherit\",\n    minHeight: \"32px\",\n    alignItems: \"center\",\n    textAlign: \"left\",\n    outline: \"none\",\n    px: 4,\n    role: role,\n    tabIndex: -1,\n    disabled: isDisabled,\n    \"aria-disabled\": isDisabled,\n    onClick: wrapEvent(onClick, function (event) {\n      if (isDisabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        return;\n      }\n\n      if (closeOnSelect) {\n        closeMenu();\n      }\n    }),\n    onMouseEnter: wrapEvent(onMouseEnter, function (event) {\n      if (isDisabled) {\n        event.stopPropagation();\n        event.preventDefault();\n        return;\n      }\n\n      if (focusableItems && focusableItems.current.length > 0) {\n        var nextIndex = focusableItems.current.indexOf(event.currentTarget);\n        focusAtIndex(nextIndex);\n      }\n    }),\n    onMouseLeave: wrapEvent(onMouseLeave, function () {\n      focusAtIndex(-1);\n    }),\n    onKeyDown: wrapEvent(onKeyDown, function (event) {\n      if (isDisabled) return;\n\n      if (event.key === \"Enter\" || event.key === \" \") {\n        event.preventDefault();\n\n        if (onClick) {\n          onClick();\n        }\n\n        if (closeOnSelect) {\n          closeMenu();\n        }\n      }\n    })\n  }, styleProps, props));\n});\nMenuItem.displayName = \"MenuItem\"; //////////////////////////////////////////////////////////////////////////////////////////\n\nvar MenuDivider = forwardRef(function (props, ref) {\n  return jsx(Divider, _extends({\n    ref: ref,\n    orientation: \"horizontal\"\n  }, props));\n});\nMenuDivider.displayName = \"MenuDivider\"; //////////////////////////////////////////////////////////////////////////////////////////\n\nvar MenuGroup = forwardRef(function (_ref5, ref) {\n  var children = _ref5.children,\n      title = _ref5.title,\n      rest = _objectWithoutPropertiesLoose(_ref5, [\"children\", \"title\"]);\n\n  return jsx(Box, {\n    ref: ref,\n    role: \"group\"\n  }, title && jsx(Text, _extends({\n    mx: 4,\n    my: 2,\n    fontWeight: \"semibold\",\n    fontSize: \"sm\"\n  }, rest), title), children);\n});\nMenuGroup.displayName = \"MenuGroup\"; //////////////////////////////////////////////////////////////////////////////////////////\n\nexport default Menu;\nexport { MenuButton, MenuDivider, MenuGroup, MenuList, MenuItem };\nexport * from \"./MenuOption\";","map":null,"metadata":{},"sourceType":"module"}