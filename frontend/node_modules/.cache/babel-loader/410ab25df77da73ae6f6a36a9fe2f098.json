{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { forwardRef } from \"react\";\nimport ControlBox from \"../ControlBox\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport VisuallyHidden from \"../VisuallyHidden\";\nimport useCheckboxStyle from \"../Checkbox/styles\";\nimport Box from \"../Box\";\nimport { useVariantColorWarning } from \"../utils\";\nvar Radio = forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      name = _ref.name,\n      value = _ref.value,\n      ariaLabel = _ref[\"aria-label\"],\n      ariaLabelledBy = _ref[\"aria-labelledby\"],\n      _ref$variantColor = _ref.variantColor,\n      variantColor = _ref$variantColor === void 0 ? \"blue\" : _ref$variantColor,\n      defaultIsChecked = _ref.defaultIsChecked,\n      isChecked = _ref.isChecked,\n      isFullWidth = _ref.isFullWidth,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? \"md\" : _ref$size,\n      isDisabled = _ref.isDisabled,\n      isInvalid = _ref.isInvalid,\n      onChange = _ref.onChange,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"id\", \"name\", \"value\", \"aria-label\", \"aria-labelledby\", \"variantColor\", \"defaultIsChecked\", \"isChecked\", \"isFullWidth\", \"size\", \"isDisabled\", \"isInvalid\", \"onChange\", \"onBlur\", \"onFocus\", \"children\"]); // Wrong usage of `variantColor` prop is quite common\n  // Let's add a warning hook that validates the passed variantColor\n\n\n  useVariantColorWarning(\"Radio\", variantColor);\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var styleProps = useCheckboxStyle({\n    color: variantColor,\n    size: size,\n    colorMode: colorMode,\n    type: \"radio\"\n  });\n  return jsx(Box, _extends({\n    as: \"label\",\n    display: \"inline-flex\",\n    verticalAlign: \"top\",\n    htmlFor: id,\n    alignItems: \"center\",\n    width: isFullWidth ? \"full\" : undefined,\n    cursor: isDisabled ? \"not-allowed\" : \"pointer\"\n  }, rest), jsx(VisuallyHidden, {\n    as: \"input\",\n    type: \"radio\",\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    id: id,\n    ref: ref,\n    name: name,\n    value: value,\n    \"aria-invalid\": isInvalid,\n    defaultChecked: defaultIsChecked,\n    onChange: onChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    checked: isChecked,\n    disabled: isDisabled\n  }), jsx(ControlBox, _extends({}, styleProps, {\n    type: \"radio\",\n    rounded: \"full\"\n  }), jsx(Box, {\n    bg: \"currentColor\",\n    as: \"span\",\n    rounded: \"full\",\n    size: \"50%\"\n  })), children && jsx(Box, {\n    ml: 2,\n    fontSize: size,\n    userSelect: \"none\",\n    opacity: isDisabled ? 0.32 : 1\n  }, children));\n});\nRadio.displayName = \"Radio\";\nexport default Radio;","map":null,"metadata":{},"sourceType":"module"}