{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport { jsx } from \"@emotion/core\";\nimport { Children, cloneElement, useState, useRef } from \"react\";\nimport { useId } from \"@reach/auto-id\";\nimport Box from \"../Box\";\n\nvar RadioButtonGroup = function RadioButtonGroup(_ref) {\n  var name = _ref.name,\n      children = _ref.children,\n      defaultValue = _ref.defaultValue,\n      controlledValue = _ref.value,\n      onChange = _ref.onChange,\n      _ref$spacing = _ref.spacing,\n      spacing = _ref$spacing === void 0 ? \"12px\" : _ref$spacing,\n      isInline = _ref.isInline,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"name\", \"children\", \"defaultValue\", \"value\", \"onChange\", \"spacing\", \"isInline\"]);\n\n  var isControlled = controlledValue != null;\n\n  var _useState = useState(defaultValue || null),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _value = isControlled ? controlledValue : value;\n\n  var allNodes = useRef([]);\n  var focusableValues = Children.map(children, function (child) {\n    return child.props.isDisabled === true ? null : child.props.value;\n  }).filter(function (val) {\n    return val != null;\n  });\n  var allValues = Children.map(children, function (child) {\n    return child.props.value;\n  });\n\n  var updateIndex = function updateIndex(index) {\n    var childValue = focusableValues[index];\n\n    var _index = allValues.indexOf(childValue);\n\n    allNodes.current[_index].focus();\n\n    !isControlled && setValue(childValue);\n    onChange && onChange(childValue);\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    // Disable page scrolling while navigating with keys\n    event.preventDefault();\n    var count = focusableValues.length;\n    var enabledCheckedIndex = focusableValues.indexOf(_value);\n\n    if (enabledCheckedIndex === -1) {\n      enabledCheckedIndex = 0;\n    }\n\n    switch (event.key) {\n      case \"ArrowRight\":\n      case \"ArrowDown\":\n        {\n          var nextIndex = (enabledCheckedIndex + 1) % count;\n          updateIndex(nextIndex);\n          break;\n        }\n\n      case \"ArrowLeft\":\n      case \"ArrowUp\":\n        {\n          var _nextIndex = (enabledCheckedIndex - 1 + count) % count;\n\n          updateIndex(_nextIndex);\n          break;\n        }\n\n      default:\n        break;\n    }\n  };\n\n  var fallbackName = \"radio-\" + useId();\n\n  var _name = name || fallbackName;\n\n  var clones = Children.map(children, function (child, index) {\n    var isLastChild = children.length === index + 1;\n    var isFirstChild = index === 0;\n    var spacingProps = isInline ? {\n      mr: spacing\n    } : {\n      mb: spacing\n    };\n    var isChecked = child.props.value === _value;\n\n    var handleClick = function handleClick() {\n      !isControlled && setValue(child.props.value);\n      onChange && onChange(child.props.value);\n    };\n\n    var getTabIndex = function getTabIndex() {\n      // If a RadioGroup has no radio selected the first enabled radio should be focusable\n      if (_value == null) {\n        return isFirstChild ? 0 : -1;\n      } else {\n        return isChecked ? 0 : -1;\n      }\n    };\n\n    return cloneElement(child, _objectSpread({\n      ref: function ref(node) {\n        return allNodes.current[index] = node;\n      },\n      name: _name,\n      onClick: handleClick,\n      tabIndex: getTabIndex(),\n      isChecked: isChecked\n    }, !isLastChild && spacingProps));\n  });\n  return jsx(Box, _extends({\n    role: \"radiogroup\",\n    onKeyDown: handleKeyDown\n  }, rest), clones);\n};\n\nRadioButtonGroup.displayName = \"RadioButtonGroup\";\nexport default RadioButtonGroup;","map":null,"metadata":{},"sourceType":"module"}