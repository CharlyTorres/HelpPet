{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { useId } from \"@reach/auto-id\";\nimport { Children, cloneElement, forwardRef, useRef, useState, isValidElement } from \"react\";\nimport { MenuGroup, useMenuContext } from \".\";\nimport Box from \"../Box\";\nimport Icon from \"../Icon\";\nimport PseudoBox from \"../PseudoBox\";\nimport { useMenuItemStyle } from \"./styles\";\nexport var MenuItemOption = forwardRef(function (_ref, ref) {\n  var isDisabled = _ref.isDisabled,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      type = _ref.type,\n      onMouseLeave = _ref.onMouseLeave,\n      onMouseEnter = _ref.onMouseEnter,\n      onKeyDown = _ref.onKeyDown,\n      isChecked = _ref.isChecked,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"isDisabled\", \"children\", \"onClick\", \"type\", \"onMouseLeave\", \"onMouseEnter\", \"onKeyDown\", \"isChecked\"]);\n\n  var _useMenuContext = useMenuContext(),\n      focusableItems = _useMenuContext.focusableItems,\n      focusAtIndex = _useMenuContext.focusAtIndex,\n      closeMenu = _useMenuContext.closeMenu,\n      closeOnSelect = _useMenuContext.closeOnSelect;\n\n  var role = \"menuitem\" + type;\n\n  var handleSelect = function handleSelect() {\n    onClick && onClick();\n    closeOnSelect && closeMenu();\n  };\n\n  var handleClick = function handleClick(event) {\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    handleSelect();\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    if (isDisabled) return;\n\n    if ([\"Enter\", \" \"].includes(event.key)) {\n      event.preventDefault();\n      handleSelect();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  var handleMouseEnter = function handleMouseEnter(event) {\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    var nextIndex = focusableItems.current.indexOf(event.currentTarget);\n    focusAtIndex(nextIndex);\n\n    if (onMouseEnter) {\n      onMouseEnter(event);\n    }\n  };\n\n  var handleMouseLeave = function handleMouseLeave(event) {\n    focusAtIndex(-1);\n\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n  };\n\n  var styleProps = useMenuItemStyle();\n  return jsx(PseudoBox, _extends({\n    ref: ref,\n    as: \"button\",\n    display: \"flex\",\n    minHeight: \"32px\",\n    alignItems: \"center\",\n    onClick: handleClick,\n    role: role,\n    tabIndex: -1,\n    \"aria-checked\": isChecked,\n    disabled: isDisabled,\n    \"aria-disabled\": isDisabled ? \"\" : undefined,\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    onKeyDown: handleKeyDown\n  }, styleProps, rest), jsx(Icon, {\n    name: \"check\",\n    opacity: isChecked ? 1 : 0,\n    color: \"currentColor\",\n    size: \"1em\",\n    ml: \"1rem\",\n    mr: \"-4px\",\n    \"aria-hidden\": true,\n    \"data-menuitem-icon\": \"\"\n  }), jsx(Box, {\n    textAlign: \"left\",\n    as: \"span\",\n    mx: \"1rem\",\n    flex: \"1\"\n  }, children));\n});\nMenuItemOption.displayName = \"MenuItemOption\";\nexport var MenuOptionGroup = function MenuOptionGroup(_ref2) {\n  var children = _ref2.children,\n      _ref2$type = _ref2.type,\n      type = _ref2$type === void 0 ? \"radio\" : _ref2$type,\n      name = _ref2.name,\n      title = _ref2.title,\n      valueProp = _ref2.value,\n      defaultValue = _ref2.defaultValue,\n      onChange = _ref2.onChange,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"children\", \"type\", \"name\", \"title\", \"value\", \"defaultValue\", \"onChange\"]);\n\n  var _useState = useState(defaultValue || \"\"),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useRef = useRef(valueProp != null),\n      isControlled = _useRef.current;\n\n  var derivedValue = isControlled ? valueProp : value;\n\n  var handleChange = function handleChange(_value) {\n    if (type === \"radio\") {\n      !isControlled && setValue(_value);\n      onChange && onChange(_value);\n    }\n\n    if (type === \"checkbox\") {\n      var newValue = derivedValue.includes(_value) ? derivedValue.filter(function (itemValue) {\n        return itemValue !== _value;\n      }) : [].concat(derivedValue, [_value]);\n      !isControlled && setValue(newValue);\n      onChange && onChange(newValue);\n    }\n  };\n\n  var fallbackName = \"radio-\" + useId();\n  return jsx(MenuGroup, _extends({\n    title: title\n  }, rest), Children.map(children, function (child) {\n    if (!isValidElement(child)) return;\n\n    if (type === \"radio\") {\n      return cloneElement(child, {\n        type: type,\n        key: child.props.value,\n        onClick: function onClick(event) {\n          handleChange(child.props.value);\n\n          if (child.props.onClick) {\n            child.props.onClick(event);\n          }\n        },\n        name: name || fallbackName,\n        isChecked: child.props.value === derivedValue\n      });\n    }\n\n    if (type === \"checkbox\") {\n      return cloneElement(child, {\n        type: type,\n        key: child.props.value,\n        onClick: function onClick(event) {\n          handleChange(child.props.value);\n\n          if (child.props.onClick) {\n            child.props.onClick(event);\n          }\n        },\n        isChecked: derivedValue.includes(child.props.value)\n      });\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}