{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  0% {\\n    transform: rotate(0deg);\\n  }\\n  100% {\\n    transform: rotate(360deg);\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  0% {\\n    stroke-dasharray: 1, 400;\\n    stroke-dashoffset: 0;\\n  }\\n\\n  50% {\\n    stroke-dasharray: 400, 400;\\n    stroke-dashoffset: -100;\\n  }\\n\\n  100% {\\n    stroke-dasharray: 400, 400;\\n    stroke-dashoffset: -300;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/** @jsx jsx */\n\n\nimport { jsx, keyframes } from \"@emotion/core\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport Box from \"../Box\";\nimport { forwardRef } from \"react\";\nvar circularProgressCircle = keyframes(_templateObject());\nvar spin = keyframes(_templateObject2());\nexport var CircularProgressLabel = function CircularProgressLabel(props) {\n  return jsx(Box, _extends({\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    lineHeight: \"1\",\n    transform: \"translate(-50%, -50%)\",\n    fontSize: \"0.25em\",\n    css: {\n      fontVariantNumeric: \"tabular-nums\"\n    }\n  }, props));\n};\n\nfunction getComputedProps(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      size = _ref.size,\n      value = _ref.value,\n      angle = _ref.angle,\n      thickness = _ref.thickness,\n      trackColor = _ref.trackColor,\n      color = _ref.color,\n      capIsRound = _ref.capIsRound,\n      isIndeterminate = _ref.isIndeterminate;\n  var radius = 50;\n  var diameter = radius * 2;\n  var circumference = diameter * Math.PI;\n  var strokeDasharray = Math.round(circumference * 1000) / 1000;\n  var viewBox = diameter / (1 - thickness / 2);\n  var viewBoxAttr = viewBox / 2 + \" \" + viewBox / 2 + \" \" + viewBox + \" \" + viewBox;\n  var strokeWidth = thickness / 2 * viewBox;\n  var progress = 1 - (value - min) / (max - min);\n  var strokeDashoffset = progress * circumference;\n\n  function getCircleProps(_ref2) {\n    var thickness = _ref2.thickness,\n        offset = _ref2.offset,\n        color = _ref2.color;\n    return {\n      as: \"circle\",\n      color: color,\n      fill: \"transparent\",\n      stroke: \"currentColor\",\n      strokeWidth: thickness,\n      strokeDasharray: strokeDasharray,\n      strokeDashoffset: offset,\n      cx: viewBox,\n      cy: viewBox,\n      r: radius\n    };\n  }\n\n  return {\n    rootProps: {\n      size: \"1em\",\n      fontSize: size,\n      display: \"inline-block\",\n      position: \"relative\",\n      veriticalAlign: \"middle\",\n      role: \"progressbar\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": isIndeterminate ? null : value\n    },\n    svgProps: _objectSpread({\n      as: \"svg\",\n      viewBox: viewBoxAttr,\n      verticalAlign: \"top\",\n      transform: \"rotate3d(0, 0, 1, \" + (angle - 90) + \"deg)\",\n      size: \"100%\"\n    }, isIndeterminate && {\n      transformOrigin: \"50% 50%\",\n      animation: spin + \" 2s linear infinite\"\n    }),\n    trackCircleProps: getCircleProps({\n      thickness: strokeWidth,\n      offset: 0,\n      color: trackColor\n    }),\n    indicatorCircleProps: _objectSpread({}, getCircleProps({\n      thickness: strokeWidth,\n      offset: strokeDashoffset,\n      color: color\n    }), {}, capIsRound && {\n      strokeLinecap: \"round\"\n    }, {}, isIndeterminate && {\n      transition: \"stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease\",\n      animation: circularProgressCircle + \" 1.5s ease-in-out infinite\",\n      strokeDasharray: \"1 400\",\n      strokeDashoffset: \"0\"\n    }, {\n      stroke: \"currentColor\"\n    })\n  };\n}\n\nvar CircularProgress = forwardRef(function (props, ref) {\n  var _props$size = props.size,\n      size = _props$size === void 0 ? \"48px\" : _props$size,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 100 : _props$max,\n      _props$min = props.min,\n      min = _props$min === void 0 ? 0 : _props$min,\n      isIndeterminate = props.isIndeterminate,\n      _props$thickness = props.thickness,\n      thickness = _props$thickness === void 0 ? 0.2 : _props$thickness,\n      value = props.value,\n      _props$angle = props.angle,\n      angle = _props$angle === void 0 ? 0 : _props$angle,\n      capIsRound = props.capIsRound,\n      children = props.children,\n      _props$trackColor = props.trackColor,\n      trackColor = _props$trackColor === void 0 ? \"gray\" : _props$trackColor,\n      _props$color = props.color,\n      color = _props$color === void 0 ? \"blue\" : _props$color,\n      rest = _objectWithoutPropertiesLoose(props, [\"size\", \"max\", \"min\", \"isIndeterminate\", \"thickness\", \"value\", \"angle\", \"capIsRound\", \"children\", \"trackColor\", \"color\"]);\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _trackColor = {\n    light: trackColor + \".100\",\n    dark: \"whiteAlpha.300\"\n  };\n  var _color = {\n    light: color + \".500\",\n    dark: color + \".200\"\n  };\n\n  var _getComputedProps = getComputedProps({\n    min: min,\n    max: max,\n    value: value,\n    size: size,\n    angle: angle,\n    thickness: thickness,\n    capIsRound: capIsRound,\n    isIndeterminate: isIndeterminate,\n    color: _color[colorMode],\n    trackColor: _trackColor[colorMode]\n  }),\n      rootProps = _getComputedProps.rootProps,\n      indicatorCircleProps = _getComputedProps.indicatorCircleProps,\n      svgProps = _getComputedProps.svgProps,\n      trackCircleProps = _getComputedProps.trackCircleProps;\n\n  return jsx(Box, _extends({\n    ref: ref\n  }, rootProps, rest), jsx(Box, svgProps, jsx(Box, _extends({}, trackCircleProps, {\n    \"data-progress-track\": true\n  })), jsx(Box, _extends({}, indicatorCircleProps, {\n    \"data-progress-indicator\": true\n  }))), children);\n});\nCircularProgress.displayName = \"CircularProgress\";\nexport default CircularProgress;","map":null,"metadata":{},"sourceType":"module"}