{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { forwardRef } from \"react\";\nimport Box from \"../Box\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport ControlBox from \"../ControlBox\";\nimport VisuallyHidden from \"../VisuallyHidden\";\nvar switchSizes = {\n  sm: {\n    width: \"1.375rem\",\n    height: \"0.75rem\"\n  },\n  md: {\n    width: \"1.875rem\",\n    height: \"1rem\"\n  },\n  lg: {\n    width: \"2.875rem\",\n    height: \"1.5rem\"\n  }\n};\nvar Switch = forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      name = _ref.name,\n      value = _ref.value,\n      ariaLabel = _ref[\"aria-label\"],\n      ariaLabelledBy = _ref[\"aria-labelledby\"],\n      color = _ref.color,\n      defaultIsChecked = _ref.defaultIsChecked,\n      isChecked = _ref.isChecked,\n      size = _ref.size,\n      isDisabled = _ref.isDisabled,\n      isInvalid = _ref.isInvalid,\n      onChange = _ref.onChange,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      children = _ref.children,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"id\", \"name\", \"value\", \"aria-label\", \"aria-labelledby\", \"color\", \"defaultIsChecked\", \"isChecked\", \"size\", \"isDisabled\", \"isInvalid\", \"onChange\", \"onBlur\", \"onFocus\", \"children\"]);\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var width = switchSizes[size] && switchSizes[size][\"width\"];\n  var height = switchSizes[size] && switchSizes[size][\"height\"];\n  var stylesProps = {\n    rounded: \"full\",\n    justifyContent: \"flex-start\",\n    width: width,\n    height: height,\n    bg: colorMode === \"dark\" ? \"whiteAlpha.400\" : \"gray.300\",\n    boxSizing: \"content-box\",\n    p: \"2px\",\n    _checked: {\n      bg: color + \".500\"\n    },\n    _child: {\n      transform: \"translateX(0)\"\n    },\n    _checkedAndChild: {\n      transform: \"translateX(calc(\" + width + \" - \" + height + \"))\"\n    },\n    _focus: {\n      boxShadow: \"outline\"\n    },\n    _hover: {\n      cursor: \"pointer\"\n    },\n    _checkedAndHover: {\n      cursor: \"pointer\"\n    },\n    _disabled: {\n      opacity: 0.4,\n      cursor: \"not-allowed\"\n    }\n  };\n  return jsx(Box, _extends({\n    as: \"label\",\n    display: \"inline-block\",\n    verticalAlign: \"middle\"\n  }, rest), jsx(VisuallyHidden, {\n    as: \"input\",\n    type: \"checkbox\",\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    id: id,\n    ref: ref,\n    name: name,\n    value: value,\n    \"aria-invalid\": isInvalid,\n    defaultChecked: defaultIsChecked,\n    onChange: onChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    checked: isChecked,\n    disabled: isDisabled\n  }), jsx(ControlBox, stylesProps, jsx(Box, {\n    bg: \"white\",\n    transition: \"transform 250ms\",\n    rounded: \"full\",\n    size: height\n  })));\n});\nSwitch.displayName = \"Switch\";\nSwitch.defaultProps = {\n  color: \"blue\",\n  size: \"md\"\n};\nexport default Switch;","map":null,"metadata":{},"sourceType":"module"}