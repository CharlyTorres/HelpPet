{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/** @jsx jsx */\n\n\nimport { jsx } from \"@emotion/core\";\nimport { cloneElement, useRef, Children, Fragment } from \"react\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport Box from \"../Box\";\nimport useDisclosure from \"../useDisclosure\";\nimport { useId } from \"@reach/auto-id\";\nimport Popper, { PopperArrow } from \"../Popper\";\nimport VisuallyHidden from \"../VisuallyHidden\";\n\nvar wrapEvent = function wrapEvent(child, theirHandler, ourHandler) {\n  return function (event) {\n    if (typeof child !== \"string\" && child.props[theirHandler]) {\n      child.props[theirHandler](event);\n    }\n\n    if (!event.defaultPrevented) {\n      return ourHandler(event);\n    }\n  };\n};\n\nvar Tooltip = function Tooltip(_ref) {\n  var label = _ref.label,\n      ariaLabel = _ref[\"aria-label\"],\n      _ref$showDelay = _ref.showDelay,\n      showDelay = _ref$showDelay === void 0 ? 0 : _ref$showDelay,\n      _ref$hideDelay = _ref.hideDelay,\n      hideDelay = _ref$hideDelay === void 0 ? 0 : _ref$hideDelay,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? \"auto\" : _ref$placement,\n      children = _ref.children,\n      hasArrow = _ref.hasArrow,\n      closeOnClick = _ref.closeOnClick,\n      defaultIsOpen = _ref.defaultIsOpen,\n      shouldWrapChildren = _ref.shouldWrapChildren,\n      controlledIsOpen = _ref.isOpen,\n      onOpenProp = _ref.onOpen,\n      onCloseProp = _ref.onClose,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"label\", \"aria-label\", \"showDelay\", \"hideDelay\", \"placement\", \"children\", \"hasArrow\", \"closeOnClick\", \"defaultIsOpen\", \"shouldWrapChildren\", \"isOpen\", \"onOpen\", \"onClose\"]);\n\n  var _useDisclosure = useDisclosure(defaultIsOpen || false),\n      isOpen = _useDisclosure.isOpen,\n      onClose = _useDisclosure.onClose,\n      onOpen = _useDisclosure.onOpen;\n\n  var _useRef = useRef(controlledIsOpen != null),\n      isControlled = _useRef.current;\n\n  var _isOpen = isControlled ? controlledIsOpen : isOpen;\n\n  var referenceRef = useRef();\n  var enterTimeoutRef = useRef();\n  var exitTimeoutRef = useRef();\n\n  var openWithDelay = function openWithDelay() {\n    enterTimeoutRef.current = setTimeout(onOpen, showDelay);\n  };\n\n  var closeWithDelay = function closeWithDelay() {\n    exitTimeoutRef.current = setTimeout(onClose, hideDelay);\n  };\n\n  var tooltipId = \"tooltip-\" + useId();\n\n  var handleOpen = function handleOpen() {\n    if (!isControlled) {\n      openWithDelay();\n    }\n\n    if (onOpenProp) {\n      onOpenProp();\n    }\n  };\n\n  var handleClose = function handleClose() {\n    if (!isControlled) {\n      closeWithDelay();\n    }\n\n    if (onCloseProp) {\n      onCloseProp();\n    }\n  };\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _bg = colorMode === \"dark\" ? \"gray.300\" : \"gray.700\";\n\n  var _color = colorMode === \"dark\" ? \"gray.900\" : \"whiteAlpha.900\";\n\n  var handleClick = wrapEvent(children, \"onClick\", function () {\n    if (closeOnClick) {\n      closeWithDelay();\n    }\n  });\n\n  var referenceProps = _objectSpread({\n    ref: referenceRef,\n    onMouseEnter: wrapEvent(children, \"onMouseEnter\", handleOpen),\n    onMouseLeave: wrapEvent(children, \"onMouseLeave\", handleClose),\n    onClick: handleClick,\n    onFocus: wrapEvent(children, \"onFocus\", handleOpen),\n    onBlur: wrapEvent(children, \"onBlur\", handleClose)\n  }, _isOpen && {\n    \"aria-describedby\": tooltipId\n  });\n\n  var clone;\n\n  if (typeof children === \"string\" || shouldWrapChildren) {\n    clone = jsx(Box, _extends({\n      as: \"span\",\n      tabIndex: \"0\"\n    }, referenceProps), children);\n  } else {\n    clone = cloneElement(Children.only(children), referenceProps);\n  }\n\n  var hasAriaLabel = ariaLabel != null;\n  return jsx(Fragment, null, clone, jsx(Popper, _extends({\n    usePortal: true,\n    isOpen: _isOpen,\n    placement: placement,\n    timeout: 200,\n    modifiers: {\n      offset: {\n        enabled: true,\n        offset: \"0, 8\"\n      }\n    },\n    anchorEl: referenceRef.current,\n    arrowSize: \"10px\",\n    hasArrow: hasArrow,\n    px: \"8px\",\n    py: \"2px\",\n    id: hasAriaLabel ? undefined : tooltipId,\n    role: hasAriaLabel ? undefined : \"tooltip\",\n    bg: _bg,\n    borderRadius: \"sm\",\n    fontWeight: \"medium\",\n    pointerEvents: \"none\",\n    color: _color,\n    fontSize: \"sm\",\n    shadow: \"md\",\n    maxW: \"320px\"\n  }, rest), label, hasAriaLabel && jsx(VisuallyHidden, {\n    role: \"tooltip\",\n    id: tooltipId\n  }, ariaLabel), hasArrow && jsx(PopperArrow, null)));\n};\n\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}