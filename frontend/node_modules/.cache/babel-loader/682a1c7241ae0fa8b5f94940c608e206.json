{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { system } from \"styled-system\";\nexport var config = {\n  roundedTop: {\n    properties: [\"borderTopLeftRadius\", \"borderTopRightRadius\"],\n    scale: \"radii\"\n  },\n  roundedBottom: {\n    properties: [\"borderBottomLeftRadius\", \"borderBottomRightRadius\"],\n    scale: \"radii\"\n  },\n  roundedLeft: {\n    properties: [\"borderTopLeftRadius\", \"borderBottomLeftRadius\"],\n    scale: \"radii\"\n  },\n  roundedRight: {\n    properties: [\"borderTopRightRadius\", \"borderBottomRightRadius\"],\n    scale: \"radii\"\n  },\n  roundedTopRight: {\n    property: \"borderTopRightRadius\",\n    scale: \"radii\"\n  },\n  roundedTopLeft: {\n    property: \"borderTopLeftRadius\",\n    scale: \"radii\"\n  },\n  roundedBottomRight: {\n    property: \"borderBottomRightRadius\",\n    scale: \"radii\"\n  },\n  roundedBottomLeft: {\n    property: \"borderBottomLeftRadius\",\n    scale: \"radii\"\n  },\n  rounded: {\n    property: \"borderRadius\",\n    scale: \"radii\"\n  },\n  d: {\n    property: \"display\"\n  },\n  w: {\n    property: \"width\",\n    scale: \"sizes\"\n  },\n  minW: {\n    property: \"minWidth\",\n    scale: \"sizes\"\n  },\n  maxW: {\n    property: \"maxWidth\",\n    scale: \"sizes\"\n  },\n  h: {\n    property: \"height\",\n    scale: \"sizes\"\n  },\n  minH: {\n    property: \"minHeight\",\n    scale: \"sizes\"\n  },\n  maxH: {\n    property: \"maxHeight\",\n    scale: \"sizes\"\n  },\n  bgImg: {\n    property: \"backgroundImage\"\n  },\n  bgImage: {\n    property: \"backgroundImage\"\n  },\n  bgSize: {\n    property: \"backgroundSize\"\n  },\n  bgPos: {\n    property: \"backgroundPosition\"\n  },\n  bgRepeat: {\n    property: \"backgroundRepeat\"\n  },\n  pos: {\n    property: \"position\"\n  },\n  flexDir: {\n    property: \"flexDirection\"\n  },\n  shadow: {\n    property: \"boxShadow\",\n    scale: \"shadows\"\n  },\n  textDecoration: {\n    property: \"textDecoration\"\n  },\n  overflowX: true,\n  overflowY: true,\n  textTransform: true,\n  animation: true,\n  appearance: true,\n  transform: true,\n  transformOrigin: true,\n  visibility: true,\n  whiteSpace: true,\n  userSelect: true,\n  pointerEvents: true,\n  wordBreak: true,\n  overflowWrap: true,\n  textOverflow: true,\n  boxSizing: true,\n  cursor: true,\n  resize: true,\n  transition: true,\n  listStyleType: true,\n  listStylePosition: true,\n  listStyleImage: true,\n  fill: {\n    property: \"fill\",\n    scale: \"colors\"\n  },\n  stroke: {\n    property: \"stroke\",\n    scale: \"colors\"\n  },\n  objectFit: true,\n  objectPosition: true,\n  backgroundAttachment: {\n    property: \"backgroundAttachment\"\n  },\n  outline: true,\n  \"float\": true,\n  willChange: true\n};\nconfig.bgAttachment = config.backgroundAttachment;\nconfig.textDecor = config.textDecoration;\nconfig.listStylePos = config.listStylePosition;\nconfig.listStyleImg = config.listStyleImage;\nvar extraConfig = system(config);\nexport default extraConfig; // Create an issue on @styled-system/css to allow custom alias to be passed to the `css` function\n// Transform the custom alias to a format that styled-system CSS supports\n\nvar transformAlias = function transformAlias(prop, propValue) {\n  var configKeys = Object.keys(config);\n  var result = {};\n\n  if (configKeys.includes(prop)) {\n    var _config$prop = config[prop],\n        properties = _config$prop.properties,\n        property = _config$prop.property;\n\n    if (properties) {\n      properties.forEach(function (_cssProp) {\n        return result[_cssProp] = propValue;\n      });\n    }\n\n    if (property) {\n      result[property] = propValue;\n    }\n\n    if (config[prop] === true) {\n      result[prop] = propValue;\n    }\n  } else {\n    result[prop] = propValue;\n  }\n\n  return result;\n};\n\nexport var transformAliasProps = function transformAliasProps(props) {\n  var result = {};\n\n  for (var prop in props) {\n    if (typeof props[prop] === \"object\") {\n      var _objectSpread2;\n\n      result = _objectSpread({}, result, (_objectSpread2 = {}, _objectSpread2[prop] = transformAliasProps(props[prop]), _objectSpread2));\n    } else {\n      result = _objectSpread({}, result, {}, transformAlias(prop, props[prop]));\n    }\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}