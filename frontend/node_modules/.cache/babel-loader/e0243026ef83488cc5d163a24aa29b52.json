{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { forwardRef } from \"react\";\nimport Icon from \"../Icon\";\nimport Spinner from \"../Spinner\";\nimport useButtonStyle from \"./styles\";\nimport PseudoBox from \"../PseudoBox\";\nimport Box from \"../Box\";\nimport { useVariantColorWarning } from \"../utils\";\n\nvar ButtonIcon = function ButtonIcon(_ref) {\n  var icon = _ref.icon,\n      props = _objectWithoutPropertiesLoose(_ref, [\"icon\"]);\n\n  if (typeof icon === \"string\") {\n    return jsx(Icon, _extends({\n      focusable: \"false\",\n      name: icon,\n      color: \"currentColor\"\n    }, props));\n  }\n\n  return jsx(Box, _extends({\n    as: icon,\n    \"data-custom-icon\": true,\n    focusable: \"false\",\n    color: \"currentColor\"\n  }, props));\n};\n\nvar Button = forwardRef(function (_ref2, ref) {\n  var isDisabled = _ref2.isDisabled,\n      isLoading = _ref2.isLoading,\n      isActive = _ref2.isActive,\n      isFullWidth = _ref2.isFullWidth,\n      children = _ref2.children,\n      _ref2$as = _ref2.as,\n      Comp = _ref2$as === void 0 ? \"button\" : _ref2$as,\n      _ref2$variantColor = _ref2.variantColor,\n      variantColor = _ref2$variantColor === void 0 ? \"gray\" : _ref2$variantColor,\n      leftIcon = _ref2.leftIcon,\n      rightIcon = _ref2.rightIcon,\n      _ref2$variant = _ref2.variant,\n      variant = _ref2$variant === void 0 ? \"solid\" : _ref2$variant,\n      loadingText = _ref2.loadingText,\n      _ref2$iconSpacing = _ref2.iconSpacing,\n      iconSpacing = _ref2$iconSpacing === void 0 ? 2 : _ref2$iconSpacing,\n      _ref2$type = _ref2.type,\n      type = _ref2$type === void 0 ? \"button\" : _ref2$type,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? \"md\" : _ref2$size,\n      colorMode = _ref2.colorMode,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"isDisabled\", \"isLoading\", \"isActive\", \"isFullWidth\", \"children\", \"as\", \"variantColor\", \"leftIcon\", \"rightIcon\", \"variant\", \"loadingText\", \"iconSpacing\", \"type\", \"size\", \"colorMode\"]); // Wrong usage of `variantColor` prop is quite common\n  // Let's add a warning hook that validates the passed variantColor\n\n\n  useVariantColorWarning(\"Button\", variantColor);\n  var buttonStyleProps = useButtonStyle({\n    color: variantColor,\n    variant: variant,\n    size: size,\n    colorMode: colorMode\n  });\n\n  var _isDisabled = isDisabled || isLoading;\n\n  return jsx(PseudoBox, _extends({\n    disabled: _isDisabled,\n    \"aria-disabled\": _isDisabled,\n    ref: ref,\n    as: Comp,\n    type: type,\n    borderRadius: \"md\",\n    fontWeight: \"semibold\",\n    width: isFullWidth ? \"full\" : undefined,\n    \"data-active\": isActive ? \"true\" : undefined\n  }, buttonStyleProps, rest), leftIcon && !isLoading && jsx(ButtonIcon, {\n    ml: -1,\n    mr: iconSpacing,\n    icon: leftIcon\n  }), isLoading && jsx(Spinner, {\n    position: loadingText ? \"relative\" : \"absolute\",\n    mr: loadingText ? iconSpacing : 0,\n    color: \"currentColor\",\n    size: \"1em\"\n  }), isLoading ? loadingText || jsx(Box, {\n    as: \"span\",\n    opacity: \"0\"\n  }, children) : children, rightIcon && !isLoading && jsx(ButtonIcon, {\n    mr: -1,\n    ml: iconSpacing,\n    icon: rightIcon\n  }));\n});\nButton.displayName = \"Button\";\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}