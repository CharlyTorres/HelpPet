{"ast":null,"code":"import { getExponentialParts, isExponential } from './helpers';\n/**\n * Converts exponential notation to a human readable string\n * @param {number|string|Array} num - number or array of its parts\n * @return {string}\n */\n\nexport default function fromExponential(num) {\n  const eParts = getExponentialParts(num);\n\n  if (!isExponential(eParts)) {\n    return eParts[0];\n  }\n\n  const sign = eParts[0][0] === '-' ? '-' : '';\n  const digits = eParts[0].replace(/^-/, '');\n  const digitsParts = digits.split('.');\n  const wholeDigits = digitsParts[0];\n  const fractionDigits = digitsParts[1] || '';\n  let e = Number(eParts[1]);\n\n  if (e === 0) {\n    return `${sign + wholeDigits}.${fractionDigits}`;\n  } else if (e < 0) {\n    // move dot to the left\n    const countWholeAfterTransform = wholeDigits.length + e;\n\n    if (countWholeAfterTransform > 0) {\n      // transform whole to fraction\n      const wholeDigitsAfterTransform = wholeDigits.substr(0, countWholeAfterTransform);\n      const wholeDigitsTransformedToFracton = wholeDigits.substr(countWholeAfterTransform);\n      return `${sign + wholeDigitsAfterTransform}.${wholeDigitsTransformedToFracton}${fractionDigits}`;\n    } else {\n      // not enough whole digits: prepend with fractional zeros\n      // first e goes to dotted zero\n      let zeros = '0.';\n      e += 1;\n\n      while (e) {\n        zeros += '0';\n        e += 1;\n      }\n\n      return sign + zeros + wholeDigits + fractionDigits;\n    }\n  } else {\n    // move dot to the right\n    const countFractionAfterTransform = fractionDigits.length - e;\n\n    if (countFractionAfterTransform > 0) {\n      // transform fraction to whole\n      // countTransformedFractionToWhole = e\n      const fractionDigitsAfterTransform = fractionDigits.substr(e);\n      const fractionDigitsTransformedToWhole = fractionDigits.substr(0, e);\n      return `${sign + wholeDigits + fractionDigitsTransformedToWhole}.${fractionDigitsAfterTransform}`;\n    } else {\n      // not enough fractions: append whole zeros\n      let zerosCount = -countFractionAfterTransform;\n      let zeros = '';\n\n      while (zerosCount) {\n        zeros += '0';\n        zerosCount -= 1;\n      }\n\n      return sign + wholeDigits + fractionDigits + zeros;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}