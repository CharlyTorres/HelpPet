{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { createContext, forwardRef, useContext } from \"react\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport Flex from \"../Flex\";\nimport Icon from \"../Icon\";\nimport Input from \"../Input\";\nimport PseudoBox from \"../PseudoBox\";\nimport useNumberInput from \"../useNumberInput\";\nimport { useForkRef, wrapEvent } from \"../utils\";\nimport styleProps from \"./styles\";\nvar NumberInputContext = createContext({});\n\nvar useNumberInputContext = function useNumberInputContext() {\n  var context = useContext(NumberInputContext);\n\n  if (context == null) {\n    throw new Error(\"This component must be used within the `NumberInput` \");\n  }\n\n  return context;\n};\n\nvar NumberInput = forwardRef(function (_ref2, ref) {\n  var value = _ref2.value,\n      onChange = _ref2.onChange,\n      defaultValue = _ref2.defaultValue,\n      focusInputOnChange = _ref2.focusInputOnChange,\n      clampValueOnBlur = _ref2.clampValueOnBlur,\n      keepWithinRange = _ref2.keepWithinRange,\n      min = _ref2.min,\n      max = _ref2.max,\n      step = _ref2.step,\n      precision = _ref2.precision,\n      getAriaValueText = _ref2.getAriaValueText,\n      isReadOnly = _ref2.isReadOnly,\n      isInvalid = _ref2.isInvalid,\n      isDisabled = _ref2.isDisabled,\n      isFullWidth = _ref2.isFullWidth,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? \"md\" : _ref2$size,\n      children = _ref2.children,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"value\", \"onChange\", \"defaultValue\", \"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"precision\", \"getAriaValueText\", \"isReadOnly\", \"isInvalid\", \"isDisabled\", \"isFullWidth\", \"size\", \"children\"]);\n\n  var context = useNumberInput({\n    value: value,\n    onChange: onChange,\n    defaultValue: defaultValue,\n    focusInputOnChange: focusInputOnChange,\n    clampValueOnBlur: clampValueOnBlur,\n    keepWithinRange: keepWithinRange,\n    min: min,\n    max: max,\n    step: step,\n    precision: precision,\n    getAriaValueText: getAriaValueText,\n    isReadOnly: isReadOnly,\n    isInvalid: isInvalid,\n    isDisabled: isDisabled\n  });\n\n  var _children = children || React.createElement(React.Fragment, null, React.createElement(NumberInputField, null), React.createElement(NumberInputStepper, null, React.createElement(NumberIncrementStepper, null), React.createElement(NumberDecrementStepper, null)));\n\n  return React.createElement(NumberInputContext.Provider, {\n    value: _objectSpread({}, context, {\n      size: size\n    })\n  }, React.createElement(Flex, _extends({\n    ref: ref,\n    align: \"stretch\",\n    w: isFullWidth ? \"full\" : null,\n    pos: \"relative\"\n  }, rest), _children));\n});\nNumberInput.displayName = \"NumberInput\";\nvar NumberInputField = forwardRef(function (_ref3, ref) {\n  var onBlur = _ref3.onBlur,\n      onFocus = _ref3.onFocus,\n      onKeyDown = _ref3.onKeyDown,\n      onChange = _ref3.onChange,\n      props = _objectWithoutPropertiesLoose(_ref3, [\"onBlur\", \"onFocus\", \"onKeyDown\", \"onChange\"]);\n\n  var _useNumberInputContex = useNumberInputContext(),\n      size = _useNumberInputContex.size,\n      _useNumberInputContex2 = _useNumberInputContex.input,\n      _ref = _useNumberInputContex2.ref,\n      _onBlur = _useNumberInputContex2.onBlur,\n      _onFocus = _useNumberInputContex2.onFocus,\n      _onChange = _useNumberInputContex2.onChange,\n      _onKeyDown = _useNumberInputContex2.onKeyDown,\n      isDisabled = _useNumberInputContex2.disabled,\n      isReadOnly = _useNumberInputContex2.readOnly,\n      otherInputProps = _objectWithoutPropertiesLoose(_useNumberInputContex2, [\"ref\", \"onBlur\", \"onFocus\", \"onChange\", \"onKeyDown\", \"disabled\", \"readOnly\"]);\n\n  var inputRef = useForkRef(_ref, ref);\n  var handleBlur = wrapEvent(onBlur, _onBlur);\n  var handleFocus = wrapEvent(onFocus, _onFocus);\n  var handleKeyDown = wrapEvent(onKeyDown, _onKeyDown);\n  var handleChange = wrapEvent(onChange, _onChange);\n  return React.createElement(Input, _extends({\n    ref: inputRef,\n    isReadOnly: isReadOnly,\n    isDisabled: isDisabled,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onKeyDown: handleKeyDown,\n    onChange: handleChange,\n    size: size\n  }, otherInputProps, props));\n});\nNumberInputField.displayName = \"NumberInputField\";\nvar NumberInputStepper = forwardRef(function (props, ref) {\n  return React.createElement(Flex, _extends({\n    ref: ref,\n    direction: \"column\",\n    \"aria-hidden\": true,\n    width: \"24px\",\n    margin: \"1px\",\n    position: \"absolute\",\n    right: \"0px\",\n    height: \"calc(100% - 2px)\"\n  }, props));\n});\nvar StepperButton = forwardRef(function (props, ref) {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var _useNumberInputContex3 = useNumberInputContext(),\n      isDisabled = _useNumberInputContex3.isDisabled,\n      size = _useNumberInputContex3.size;\n\n  return React.createElement(PseudoBox, _extends({\n    ref: ref,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: \"1\",\n    transition: \"all 0.3s\",\n    role: \"button\",\n    tabindex: \"-1\",\n    userSelect: \"none\",\n    \"aria-disabled\": isDisabled,\n    pointerEvents: isDisabled ? \"none\" : undefined,\n    cursor: \"pointer\",\n    lineHeight: \"normal\"\n  }, styleProps({\n    colorMode: colorMode,\n    size: size\n  }), props));\n});\nNumberInputStepper.displayName = \"NumberInputStepper\";\nvar NumberIncrementStepper = forwardRef(function (props, ref) {\n  var _useNumberInputContex4 = useNumberInputContext(),\n      incrementStepper = _useNumberInputContex4.incrementStepper,\n      size = _useNumberInputContex4.size;\n\n  var iconSize = size === \"sm\" ? \"11px\" : \"15px\";\n  var children = props.children || React.createElement(Icon, {\n    name: \"triangle-up\",\n    size: \"0.6em\"\n  });\n  return React.createElement(StepperButton, _extends({\n    fontSize: iconSize,\n    ref: ref\n  }, props, incrementStepper), children);\n});\nNumberIncrementStepper.displayName = \"NumberIncrementStepper\";\nvar NumberDecrementStepper = forwardRef(function (props, ref) {\n  var _useNumberInputContex5 = useNumberInputContext(),\n      decrementStepper = _useNumberInputContex5.decrementStepper,\n      size = _useNumberInputContex5.size;\n\n  var iconSize = size === \"sm\" ? \"11px\" : \"15px\";\n  var children = props.children || React.createElement(Icon, {\n    name: \"triangle-down\",\n    size: \"0.6em\"\n  });\n  return React.createElement(StepperButton, _extends({\n    fontSize: iconSize,\n    ref: ref\n  }, props, decrementStepper), children);\n});\nNumberDecrementStepper.displayName = \"NumberDecrementStepper\";\nexport { NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper };","map":null,"metadata":{},"sourceType":"module"}