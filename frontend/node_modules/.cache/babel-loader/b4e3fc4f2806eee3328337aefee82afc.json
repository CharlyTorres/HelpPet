{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n      html {\\n        line-height: 1.5;\\n        color: \", \";\\n        background-color: \", \";\\n      }\\n\\n      /**\\n      * Allow adding a border to an element by just adding a border-width.\\n      */\\n\\n      *,\\n      *::before,\\n      *::after {\\n        border-width: 0;\\n        border-style: solid;\\n        border-color: \", \";\\n      }\\n\\n      input:-ms-input-placeholder,\\n      textarea:-ms-input-placeholder {\\n        color: \", \";\\n      }\\n\\n      input::-ms-input-placeholder,\\n      textarea::-ms-input-placeholder {\\n        color: \", \";\\n      }\\n\\n      input::placeholder,\\n      textarea::placeholder {\\n        color: \", \";\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n/** @jsx jsx */\n\n\nimport { jsx, Global, css } from \"@emotion/core\";\nimport { useColorMode } from \"../ColorModeProvider\";\nimport preflight from \"./preflight\";\n\nvar defaultConfig = function defaultConfig(theme) {\n  return {\n    light: {\n      color: theme.colors.gray[800],\n      bg: undefined,\n      borderColor: theme.colors.gray[200],\n      placeholderColor: theme.colors.gray[400]\n    },\n    dark: {\n      color: theme.colors.whiteAlpha[900],\n      bg: theme.colors.gray[800],\n      borderColor: theme.colors.whiteAlpha[300],\n      placeholderColor: theme.colors.whiteAlpha[400]\n    }\n  };\n};\n\nvar CSSReset = function CSSReset(_ref) {\n  var config = _ref.config;\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var configCSS = function configCSS(theme) {\n    var _defaultConfig = defaultConfig(theme);\n\n    var _config = config ? config(theme, _defaultConfig) : defaultConfig(theme);\n\n    var _config$colorMode = _config[colorMode],\n        color = _config$colorMode.color,\n        bg = _config$colorMode.bg,\n        borderColor = _config$colorMode.borderColor,\n        placeholderColor = _config$colorMode.placeholderColor;\n    return css(_templateObject(), color, bg, borderColor, placeholderColor, placeholderColor, placeholderColor);\n  };\n\n  return jsx(Global, {\n    styles: function styles(theme) {\n      return css([preflight(theme), configCSS(theme)]);\n    }\n  });\n};\n\nexport default CSSReset;","map":null,"metadata":{},"sourceType":"module"}