{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { createContext, useContext, forwardRef } from \"react\";\nimport { Modal, ModalBody, ModalContent, ModalFooter, ModalHeader, ModalOverlay, ModalCloseButton } from \"../Modal\";\nimport { Slide } from \"../Transition\";\nvar DrawerContext = createContext({});\n\nvar useDrawerContext = function useDrawerContext() {\n  return useContext(DrawerContext);\n};\n\nvar Drawer = function Drawer(_ref) {\n  var isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      isFullHeight = _ref.isFullHeight,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? \"right\" : _ref$placement,\n      finalFocusRef = _ref.finalFocusRef,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? \"xs\" : _ref$size,\n      props = _objectWithoutPropertiesLoose(_ref, [\"isOpen\", \"onClose\", \"isFullHeight\", \"placement\", \"finalFocusRef\", \"size\"]);\n\n  return jsx(Slide, {\n    \"in\": isOpen,\n    from: placement,\n    finalHeight: isFullHeight ? \"100vh\" : \"auto\"\n  }, function (styles) {\n    return jsx(DrawerContext.Provider, {\n      value: {\n        styles: styles,\n        size: size\n      }\n    }, jsx(Modal, _extends({\n      isOpen: true,\n      onClose: onClose,\n      finalFocusRef: finalFocusRef,\n      formatIds: function formatIds(id) {\n        return {\n          content: \"drawer-\" + id,\n          header: \"drawer-\" + id + \"-header\",\n          body: \"drawer-\" + id + \"-body\"\n        };\n      }\n    }, props)));\n  });\n};\n\nvar drawerSizes = {\n  xs: \"xs\",\n  sm: \"md\",\n  md: \"lg\",\n  lg: \"2xl\",\n  xl: \"4xl\",\n  full: \"100vw\"\n};\nvar DrawerContent = forwardRef(function (props, ref) {\n  var _useDrawerContext = useDrawerContext(),\n      _useDrawerContext$sty = _useDrawerContext.styles,\n      opacity = _useDrawerContext$sty.opacity,\n      placementStyles = _objectWithoutPropertiesLoose(_useDrawerContext$sty, [\"opacity\"]),\n      size = _useDrawerContext.size;\n\n  var _size = size in drawerSizes ? drawerSizes[size] : size;\n\n  return jsx(ModalContent, _extends({\n    ref: ref,\n    noStyles: true,\n    pos: \"fixed\",\n    maxWidth: _size\n  }, placementStyles, props));\n});\nDrawerContent.displayName = \"DrawerContent\";\nvar DrawerOverlay = forwardRef(function (props, ref) {\n  var _useDrawerContext2 = useDrawerContext(),\n      styles = _useDrawerContext2.styles;\n\n  return jsx(ModalOverlay, _extends({\n    ref: ref,\n    opacity: styles.opacity\n  }, props));\n});\nDrawerOverlay.displayName = \"DrawerOverlay\";\nvar DrawerCloseButton = forwardRef(function (_ref2, ref) {\n  var onClick = _ref2.onClick,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"onClick\"]);\n\n  return jsx(ModalCloseButton, _extends({\n    ref: ref,\n    position: \"fixed\",\n    zIndex: \"1\"\n  }, rest));\n});\nDrawerCloseButton.displayName = \"DrawerCloseButton\";\nexport { Drawer, DrawerContent, DrawerOverlay, ModalBody as DrawerBody, ModalHeader as DrawerHeader, ModalFooter as DrawerFooter, DrawerCloseButton };","map":null,"metadata":{},"sourceType":"module"}