{"ast":null,"code":"import * as React from \"react\";\nimport { Message } from \"./Message\";\nexport default class ToastManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"top-left\": [],\n      top: [],\n      \"top-right\": [],\n      \"bottom-left\": [],\n      bottom: [],\n      \"bottom-right\": []\n    };\n\n    this.notify = (message, options) => {\n      const toast = this.createToastState(message, options);\n      const {\n        position\n      } = toast; // prepend the toast for toasts positioned at the top of\n      // the screen, otherwise append it.\n\n      const isTop = position.includes(\"top\");\n      this.setState(prev => {\n        return Object.assign({}, prev, {\n          [position]: isTop ? [toast, ...prev[position]] : [...prev[position], toast]\n        });\n      });\n    };\n\n    this.createToastState = (message, options) => {\n      const id = ++ToastManager.idCounter; // a bit messy, but object.position returns a number because\n      // it's a method argument.\n\n      const position = options.hasOwnProperty(\"position\") && typeof options.position === \"string\" ? options.position : \"top\";\n      return {\n        id,\n        message,\n        position,\n        showing: true,\n        duration: typeof options.duration === \"undefined\" ? 5000 : options.duration,\n        onRequestRemove: () => this.removeToast(String(id), position),\n        type: options.type\n      };\n    }; // actually fully remove the toast\n\n\n    this.removeToast = (id, position) => {\n      this.setState(prev => {\n        return Object.assign({}, prev, {\n          [position]: prev[position].filter(toast => toast.id !== id)\n        });\n      });\n    };\n\n    this.getStyle = position => {\n      let style = {\n        maxWidth: \"560px\",\n        position: \"fixed\",\n        zIndex: 5500,\n        pointerEvents: \"none\"\n      };\n\n      if (position === \"top\" || position === \"bottom\") {\n        style.margin = \"0 auto\";\n        style.textAlign = \"center\";\n      }\n\n      if (position.includes(\"top\")) {\n        style.top = 0;\n      }\n\n      if (position.includes(\"bottom\")) {\n        style.bottom = 0;\n      }\n\n      if (!position.includes(\"left\")) {\n        style.right = 0;\n      }\n\n      if (!position.includes(\"right\")) {\n        style.left = 0;\n      }\n\n      return style;\n    };\n\n    props.notify(this.notify);\n  }\n\n  render() {\n    return Object.keys(this.state).map(position => {\n      const pos = position;\n      const toasts = this.state[pos];\n      return React.createElement(\"span\", {\n        key: position,\n        className: \"Toaster__manager-\" + pos,\n        style: this.getStyle(pos)\n      }, toasts.map(toast => {\n        return React.createElement(Message, Object.assign({\n          position: pos,\n          key: toast.id\n        }, toast));\n      }));\n    });\n  }\n\n}\nToastManager.idCounter = 0;","map":null,"metadata":{},"sourceType":"module"}