{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { createContext, useContext, forwardRef } from \"react\";\nimport Box from \"../Box\";\nexport var useFormControl = function useFormControl(props) {\n  var context = useFormControlContext();\n\n  if (!context) {\n    return props;\n  }\n\n  var keys = Object.keys(context);\n  return keys.reduce(function (acc, prop) {\n    /** Giving precedence to `props` over `context` */\n    acc[prop] = props[prop];\n\n    if (context) {\n      if (props[prop] == null) {\n        acc[prop] = context[prop];\n      }\n    }\n\n    return acc;\n  }, {});\n};\nvar FormControlContext = createContext();\nexport var useFormControlContext = function useFormControlContext() {\n  var context = useContext(FormControlContext);\n  return context;\n};\nvar FormControl = forwardRef(function (_ref, ref) {\n  var isInvalid = _ref.isInvalid,\n      isRequired = _ref.isRequired,\n      isDisabled = _ref.isDisabled,\n      isReadOnly = _ref.isReadOnly,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"isInvalid\", \"isRequired\", \"isDisabled\", \"isReadOnly\"]);\n\n  var context = {\n    isRequired: isRequired,\n    isDisabled: isDisabled,\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly\n  };\n  return jsx(FormControlContext.Provider, {\n    value: context\n  }, jsx(Box, _extends({\n    role: \"group\",\n    ref: ref\n  }, rest)));\n});\nFormControl.displayName = \"FormControl\";\nexport default FormControl;","map":null,"metadata":{},"sourceType":"module"}