import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";

/** @jsx jsx */
import { jsx } from "@emotion/core";
import { useEffect, useState, forwardRef } from "react";
import Box from "../Box";
export var useHasImageLoaded = function useHasImageLoaded(_ref) {
  var src = _ref.src,
      onLoad = _ref.onLoad,
      onError = _ref.onError;

  var _useState = useState(false),
      hasLoaded = _useState[0],
      setHasLoaded = _useState[1];

  useEffect(function () {
    var image = new window.Image();
    image.src = src;

    image.onload = function (event) {
      setHasLoaded(true);
      onLoad && onLoad(event);
    };

    image.onError = function (event) {
      setHasLoaded(false);
      onError && onError(event);
    };
  }, [src, onLoad, onError]);
  return hasLoaded;
};
var NativeImage = forwardRef(function (_ref2, ref) {
  var htmlWidth = _ref2.htmlWidth,
      htmlHeight = _ref2.htmlHeight,
      alt = _ref2.alt,
      props = _objectWithoutPropertiesLoose(_ref2, ["htmlWidth", "htmlHeight", "alt"]);

  return jsx("img", _extends({
    width: htmlWidth,
    height: htmlHeight,
    ref: ref,
    alt: alt
  }, props));
});
var Image = forwardRef(function (_ref3, ref) {
  var src = _ref3.src,
      fallbackSrc = _ref3.fallbackSrc,
      onError = _ref3.onError,
      onLoad = _ref3.onLoad,
      ignoreFallback = _ref3.ignoreFallback,
      props = _objectWithoutPropertiesLoose(_ref3, ["src", "fallbackSrc", "onError", "onLoad", "ignoreFallback"]);

  var hasLoaded = useHasImageLoaded({
    src: src,
    onLoad: onLoad,
    onError: onError
  });
  var imageProps;

  if (ignoreFallback) {
    imageProps = {
      src: src,
      onLoad: onLoad,
      onError: onError
    };
  } else {
    imageProps = {
      src: hasLoaded ? src : fallbackSrc
    };
  }

  return jsx(Box, _extends({
    as: NativeImage,
    ref: ref
  }, imageProps, props));
});
Image.displayName = "Image";
export default Image;